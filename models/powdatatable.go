// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Powdatatable is an object representing the database table.
type Powdatatable struct {
	ID                  int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	PoolName            null.String `boil:"pool_name" json:"pool_name,omitempty" toml:"pool_name" yaml:"pool_name,omitempty"`
	HashRate            null.String `boil:"hash_rate" json:"hash_rate,omitempty" toml:"hash_rate" yaml:"hash_rate,omitempty"`
	Efficiency          null.String `boil:"efficiency" json:"efficiency,omitempty" toml:"efficiency" yaml:"efficiency,omitempty"`
	Progress            null.String `boil:"progress" json:"progress,omitempty" toml:"progress" yaml:"progress,omitempty"`
	Workers             null.String `boil:"workers" json:"workers,omitempty" toml:"workers" yaml:"workers,omitempty"`
	CurrentNetworkBlock null.String `boil:"current_network_block" json:"current_network_block,omitempty" toml:"current_network_block" yaml:"current_network_block,omitempty"`
	NextNetworkBlock    null.String `boil:"next_network_block" json:"next_network_block,omitempty" toml:"next_network_block" yaml:"next_network_block,omitempty"`
	LastBlock           null.String `boil:"last_block" json:"last_block,omitempty" toml:"last_block" yaml:"last_block,omitempty"`
	NetworkDiff         null.String `boil:"network_diff" json:"network_diff,omitempty" toml:"network_diff" yaml:"network_diff,omitempty"`
	EstTime             null.String `boil:"est_time" json:"est_time,omitempty" toml:"est_time" yaml:"est_time,omitempty"`
	EstShare            null.String `boil:"est_share" json:"est_share,omitempty" toml:"est_share" yaml:"est_share,omitempty"`
	TimeSinceLast       null.String `boil:"time_since_last" json:"time_since_last,omitempty" toml:"time_since_last" yaml:"time_since_last,omitempty"`
	NetHashrate         null.String `boil:"net_hashrate" json:"net_hashrate,omitempty" toml:"net_hashrate" yaml:"net_hashrate,omitempty"`
	Price               null.String `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	BlocksFound         null.String `boil:"blocks_found" json:"blocks_found,omitempty" toml:"blocks_found" yaml:"blocks_found,omitempty"`
	TotalMiners         null.String `boil:"total_miners" json:"total_miners,omitempty" toml:"total_miners" yaml:"total_miners,omitempty"`
	Time                null.String `boil:"time" json:"time,omitempty" toml:"time" yaml:"time,omitempty"`
	PoolHashrate        null.String `boil:"pool_hashrate" json:"pool_hashrate,omitempty" toml:"pool_hashrate" yaml:"pool_hashrate,omitempty"`
	NetworkDifficulty   null.String `boil:"network_difficulty" json:"network_difficulty,omitempty" toml:"network_difficulty" yaml:"network_difficulty,omitempty"`
	CoinPrice           null.String `boil:"coin_price" json:"coin_price,omitempty" toml:"coin_price" yaml:"coin_price,omitempty"`
	BTCPrice            null.String `boil:"btc_price" json:"btc_price,omitempty" toml:"btc_price" yaml:"btc_price,omitempty"`
	Est                 null.String `boil:"est_" json:"est_,omitempty" toml:"est_" yaml:"est_,omitempty"`
	Coins               null.String `boil:"coins" json:"coins,omitempty" toml:"coins" yaml:"coins,omitempty"`
	EstCurrent          null.String `boil:"est_current" json:"est_current,omitempty" toml:"est_current" yaml:"est_current,omitempty"`

	R *powdatatableR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L powdatatableL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PowdatatableColumns = struct {
	ID                  string
	PoolName            string
	HashRate            string
	Efficiency          string
	Progress            string
	Workers             string
	CurrentNetworkBlock string
	NextNetworkBlock    string
	LastBlock           string
	NetworkDiff         string
	EstTime             string
	EstShare            string
	TimeSinceLast       string
	NetHashrate         string
	Price               string
	BlocksFound         string
	TotalMiners         string
	Time                string
	PoolHashrate        string
	NetworkDifficulty   string
	CoinPrice           string
	BTCPrice            string
	Est                 string
	Coins               string
	EstCurrent          string
}{
	ID:                  "id",
	PoolName:            "pool_name",
	HashRate:            "hash_rate",
	Efficiency:          "efficiency",
	Progress:            "progress",
	Workers:             "workers",
	CurrentNetworkBlock: "current_network_block",
	NextNetworkBlock:    "next_network_block",
	LastBlock:           "last_block",
	NetworkDiff:         "network_diff",
	EstTime:             "est_time",
	EstShare:            "est_share",
	TimeSinceLast:       "time_since_last",
	NetHashrate:         "net_hashrate",
	Price:               "price",
	BlocksFound:         "blocks_found",
	TotalMiners:         "total_miners",
	Time:                "time",
	PoolHashrate:        "pool_hashrate",
	NetworkDifficulty:   "network_difficulty",
	CoinPrice:           "coin_price",
	BTCPrice:            "btc_price",
	Est:                 "est_",
	Coins:               "coins",
	EstCurrent:          "est_current",
}

// powdatatableR is where relationships are stored.
type powdatatableR struct {
}

// powdatatableL is where Load methods for each relationship are stored.
type powdatatableL struct{}

var (
	powdatatableColumns               = []string{"id", "pool_name", "hash_rate", "efficiency", "progress", "workers", "current_network_block", "next_network_block", "last_block", "network_diff", "est_time", "est_share", "time_since_last", "net_hashrate", "price", "blocks_found", "total_miners", "time", "pool_hashrate", "network_difficulty", "coin_price", "btc_price", "est_", "coins", "est_current"}
	powdatatableColumnsWithoutDefault = []string{"pool_name", "hash_rate", "efficiency", "progress", "workers", "current_network_block", "next_network_block", "last_block", "network_diff", "est_time", "est_share", "time_since_last", "net_hashrate", "price", "blocks_found", "total_miners", "time", "pool_hashrate", "network_difficulty", "coin_price", "btc_price", "est_", "coins", "est_current"}
	powdatatableColumnsWithDefault    = []string{"id"}
	powdatatablePrimaryKeyColumns     = []string{"id"}
)

type (
	// PowdatatableSlice is an alias for a slice of pointers to Powdatatable.
	// This should generally be used opposed to []Powdatatable.
	PowdatatableSlice []*Powdatatable
	// PowdatatableHook is the signature for custom Powdatatable hook methods
	PowdatatableHook func(boil.Executor, *Powdatatable) error

	powdatatableQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	powdatatableType                 = reflect.TypeOf(&Powdatatable{})
	powdatatableMapping              = queries.MakeStructMapping(powdatatableType)
	powdatatablePrimaryKeyMapping, _ = queries.BindMapping(powdatatableType, powdatatableMapping, powdatatablePrimaryKeyColumns)
	powdatatableInsertCacheMut       sync.RWMutex
	powdatatableInsertCache          = make(map[string]insertCache)
	powdatatableUpdateCacheMut       sync.RWMutex
	powdatatableUpdateCache          = make(map[string]updateCache)
	powdatatableUpsertCacheMut       sync.RWMutex
	powdatatableUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var powdatatableBeforeInsertHooks []PowdatatableHook
var powdatatableBeforeUpdateHooks []PowdatatableHook
var powdatatableBeforeDeleteHooks []PowdatatableHook
var powdatatableBeforeUpsertHooks []PowdatatableHook

var powdatatableAfterInsertHooks []PowdatatableHook
var powdatatableAfterSelectHooks []PowdatatableHook
var powdatatableAfterUpdateHooks []PowdatatableHook
var powdatatableAfterDeleteHooks []PowdatatableHook
var powdatatableAfterUpsertHooks []PowdatatableHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Powdatatable) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range powdatatableBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Powdatatable) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range powdatatableBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Powdatatable) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range powdatatableBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Powdatatable) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range powdatatableBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Powdatatable) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range powdatatableAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Powdatatable) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range powdatatableAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Powdatatable) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range powdatatableAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Powdatatable) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range powdatatableAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Powdatatable) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range powdatatableAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPowdatatableHook registers your hook function for all future operations.
func AddPowdatatableHook(hookPoint boil.HookPoint, powdatatableHook PowdatatableHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		powdatatableBeforeInsertHooks = append(powdatatableBeforeInsertHooks, powdatatableHook)
	case boil.BeforeUpdateHook:
		powdatatableBeforeUpdateHooks = append(powdatatableBeforeUpdateHooks, powdatatableHook)
	case boil.BeforeDeleteHook:
		powdatatableBeforeDeleteHooks = append(powdatatableBeforeDeleteHooks, powdatatableHook)
	case boil.BeforeUpsertHook:
		powdatatableBeforeUpsertHooks = append(powdatatableBeforeUpsertHooks, powdatatableHook)
	case boil.AfterInsertHook:
		powdatatableAfterInsertHooks = append(powdatatableAfterInsertHooks, powdatatableHook)
	case boil.AfterSelectHook:
		powdatatableAfterSelectHooks = append(powdatatableAfterSelectHooks, powdatatableHook)
	case boil.AfterUpdateHook:
		powdatatableAfterUpdateHooks = append(powdatatableAfterUpdateHooks, powdatatableHook)
	case boil.AfterDeleteHook:
		powdatatableAfterDeleteHooks = append(powdatatableAfterDeleteHooks, powdatatableHook)
	case boil.AfterUpsertHook:
		powdatatableAfterUpsertHooks = append(powdatatableAfterUpsertHooks, powdatatableHook)
	}
}

// OneP returns a single powdatatable record from the query, and panics on error.
func (q powdatatableQuery) OneP() *Powdatatable {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single powdatatable record from the query.
func (q powdatatableQuery) One() (*Powdatatable, error) {
	o := &Powdatatable{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for powdatatable")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Powdatatable records from the query, and panics on error.
func (q powdatatableQuery) AllP() PowdatatableSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Powdatatable records from the query.
func (q powdatatableQuery) All() (PowdatatableSlice, error) {
	var o []*Powdatatable

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Powdatatable slice")
	}

	if len(powdatatableAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Powdatatable records in the query, and panics on error.
func (q powdatatableQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Powdatatable records in the query.
func (q powdatatableQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count powdatatable rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q powdatatableQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q powdatatableQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if powdatatable exists")
	}

	return count > 0, nil
}

// PowdatatablesG retrieves all records.
func PowdatatablesG(mods ...qm.QueryMod) powdatatableQuery {
	return Powdatatables(boil.GetDB(), mods...)
}

// Powdatatables retrieves all the records using an executor.
func Powdatatables(exec boil.Executor, mods ...qm.QueryMod) powdatatableQuery {
	mods = append(mods, qm.From("\"powdatatable\""))
	return powdatatableQuery{NewQuery(exec, mods...)}
}

// FindPowdatatableG retrieves a single record by ID.
func FindPowdatatableG(id int, selectCols ...string) (*Powdatatable, error) {
	return FindPowdatatable(boil.GetDB(), id, selectCols...)
}

// FindPowdatatableGP retrieves a single record by ID, and panics on error.
func FindPowdatatableGP(id int, selectCols ...string) *Powdatatable {
	retobj, err := FindPowdatatable(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPowdatatable retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPowdatatable(exec boil.Executor, id int, selectCols ...string) (*Powdatatable, error) {
	powdatatableObj := &Powdatatable{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"powdatatable\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(powdatatableObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from powdatatable")
	}

	return powdatatableObj, nil
}

// FindPowdatatableP retrieves a single record by ID with an executor, and panics on error.
func FindPowdatatableP(exec boil.Executor, id int, selectCols ...string) *Powdatatable {
	retobj, err := FindPowdatatable(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Powdatatable) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Powdatatable) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Powdatatable) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Powdatatable) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no powdatatable provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(powdatatableColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	powdatatableInsertCacheMut.RLock()
	cache, cached := powdatatableInsertCache[key]
	powdatatableInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			powdatatableColumns,
			powdatatableColumnsWithDefault,
			powdatatableColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(powdatatableType, powdatatableMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(powdatatableType, powdatatableMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"powdatatable\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"powdatatable\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into powdatatable")
	}

	if !cached {
		powdatatableInsertCacheMut.Lock()
		powdatatableInsertCache[key] = cache
		powdatatableInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Powdatatable record. See Update for
// whitelist behavior description.
func (o *Powdatatable) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Powdatatable record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Powdatatable) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Powdatatable, and panics on error.
// See Update for whitelist behavior description.
func (o *Powdatatable) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Powdatatable.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Powdatatable) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	powdatatableUpdateCacheMut.RLock()
	cache, cached := powdatatableUpdateCache[key]
	powdatatableUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			powdatatableColumns,
			powdatatablePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update powdatatable, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"powdatatable\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, powdatatablePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(powdatatableType, powdatatableMapping, append(wl, powdatatablePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update powdatatable row")
	}

	if !cached {
		powdatatableUpdateCacheMut.Lock()
		powdatatableUpdateCache[key] = cache
		powdatatableUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q powdatatableQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q powdatatableQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for powdatatable")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PowdatatableSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PowdatatableSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PowdatatableSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PowdatatableSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powdatatablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"powdatatable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, powdatatablePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in powdatatable slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Powdatatable) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Powdatatable) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Powdatatable) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Powdatatable) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no powdatatable provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(powdatatableColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	powdatatableUpsertCacheMut.RLock()
	cache, cached := powdatatableUpsertCache[key]
	powdatatableUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			powdatatableColumns,
			powdatatableColumnsWithDefault,
			powdatatableColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			powdatatableColumns,
			powdatatablePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert powdatatable, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(powdatatablePrimaryKeyColumns))
			copy(conflict, powdatatablePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"powdatatable\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(powdatatableType, powdatatableMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(powdatatableType, powdatatableMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert powdatatable")
	}

	if !cached {
		powdatatableUpsertCacheMut.Lock()
		powdatatableUpsertCache[key] = cache
		powdatatableUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Powdatatable record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Powdatatable) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Powdatatable record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Powdatatable) DeleteG() error {
	if o == nil {
		return errors.New("models: no Powdatatable provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Powdatatable record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Powdatatable) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Powdatatable record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Powdatatable) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Powdatatable provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), powdatatablePrimaryKeyMapping)
	sql := "DELETE FROM \"powdatatable\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from powdatatable")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q powdatatableQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q powdatatableQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no powdatatableQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from powdatatable")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PowdatatableSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PowdatatableSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Powdatatable slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PowdatatableSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PowdatatableSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Powdatatable slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(powdatatableBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powdatatablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"powdatatable\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, powdatatablePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from powdatatable slice")
	}

	if len(powdatatableAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Powdatatable) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Powdatatable) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Powdatatable) ReloadG() error {
	if o == nil {
		return errors.New("models: no Powdatatable provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Powdatatable) Reload(exec boil.Executor) error {
	ret, err := FindPowdatatable(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PowdatatableSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PowdatatableSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PowdatatableSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty PowdatatableSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PowdatatableSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	powdatatables := PowdatatableSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powdatatablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"powdatatable\".* FROM \"powdatatable\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, powdatatablePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&powdatatables)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PowdatatableSlice")
	}

	*o = powdatatables

	return nil
}

// PowdatatableExists checks if the Powdatatable row exists.
func PowdatatableExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"powdatatable\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if powdatatable exists")
	}

	return exists, nil
}

// PowdatatableExistsG checks if the Powdatatable row exists.
func PowdatatableExistsG(id int) (bool, error) {
	return PowdatatableExists(boil.GetDB(), id)
}

// PowdatatableExistsGP checks if the Powdatatable row exists. Panics on error.
func PowdatatableExistsGP(id int) bool {
	e, err := PowdatatableExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PowdatatableExistsP checks if the Powdatatable row exists. Panics on error.
func PowdatatableExistsP(exec boil.Executor, id int) bool {
	e, err := PowdatatableExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
