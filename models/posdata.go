// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Posdatum is an object representing the database table.
type Posdatum struct {
	ID                   int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	Posid                null.String  `boil:"posid" json:"posid,omitempty" toml:"posid" yaml:"posid,omitempty"`
	Apienabled           null.String  `boil:"apienabled" json:"apienabled,omitempty" toml:"apienabled" yaml:"apienabled,omitempty"`
	Apiversionssupported null.String  `boil:"apiversionssupported" json:"apiversionssupported,omitempty" toml:"apiversionssupported" yaml:"apiversionssupported,omitempty"`
	Network              null.String  `boil:"network" json:"network,omitempty" toml:"network" yaml:"network,omitempty"`
	URL                  null.String  `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	Launched             null.Float64 `boil:"launched" json:"launched,omitempty" toml:"launched" yaml:"launched,omitempty"`
	Lastupdated          null.Float64 `boil:"lastupdated" json:"lastupdated,omitempty" toml:"lastupdated" yaml:"lastupdated,omitempty"`
	Immature             null.Float64 `boil:"immature" json:"immature,omitempty" toml:"immature" yaml:"immature,omitempty"`
	Live                 null.Float64 `boil:"live" json:"live,omitempty" toml:"live" yaml:"live,omitempty"`
	Voted                null.Float64 `boil:"voted" json:"voted,omitempty" toml:"voted" yaml:"voted,omitempty"`
	Missed               null.Float64 `boil:"missed" json:"missed,omitempty" toml:"missed" yaml:"missed,omitempty"`
	Poolfees             null.Float64 `boil:"poolfees" json:"poolfees,omitempty" toml:"poolfees" yaml:"poolfees,omitempty"`
	Proportionlive       null.Float64 `boil:"proportionlive" json:"proportionlive,omitempty" toml:"proportionlive" yaml:"proportionlive,omitempty"`
	Proportionmissed     null.Float64 `boil:"proportionmissed" json:"proportionmissed,omitempty" toml:"proportionmissed" yaml:"proportionmissed,omitempty"`
	Usercount            null.Float64 `boil:"usercount" json:"usercount,omitempty" toml:"usercount" yaml:"usercount,omitempty"`
	Usercountactive      null.Float64 `boil:"usercountactive" json:"usercountactive,omitempty" toml:"usercountactive" yaml:"usercountactive,omitempty"`

	R *posdatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L posdatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PosdatumColumns = struct {
	ID                   string
	Posid                string
	Apienabled           string
	Apiversionssupported string
	Network              string
	URL                  string
	Launched             string
	Lastupdated          string
	Immature             string
	Live                 string
	Voted                string
	Missed               string
	Poolfees             string
	Proportionlive       string
	Proportionmissed     string
	Usercount            string
	Usercountactive      string
}{
	ID:                   "id",
	Posid:                "posid",
	Apienabled:           "apienabled",
	Apiversionssupported: "apiversionssupported",
	Network:              "network",
	URL:                  "url",
	Launched:             "launched",
	Lastupdated:          "lastupdated",
	Immature:             "immature",
	Live:                 "live",
	Voted:                "voted",
	Missed:               "missed",
	Poolfees:             "poolfees",
	Proportionlive:       "proportionlive",
	Proportionmissed:     "proportionmissed",
	Usercount:            "usercount",
	Usercountactive:      "usercountactive",
}

// posdatumR is where relationships are stored.
type posdatumR struct {
}

// posdatumL is where Load methods for each relationship are stored.
type posdatumL struct{}

var (
	posdatumColumns               = []string{"id", "posid", "apienabled", "apiversionssupported", "network", "url", "launched", "lastupdated", "immature", "live", "voted", "missed", "poolfees", "proportionlive", "proportionmissed", "usercount", "usercountactive"}
	posdatumColumnsWithoutDefault = []string{"posid", "apienabled", "apiversionssupported", "network", "url", "launched", "lastupdated", "immature", "live", "voted", "missed", "poolfees", "proportionlive", "proportionmissed", "usercount", "usercountactive"}
	posdatumColumnsWithDefault    = []string{"id"}
	posdatumPrimaryKeyColumns     = []string{"id"}
)

type (
	// PosdatumSlice is an alias for a slice of pointers to Posdatum.
	// This should generally be used opposed to []Posdatum.
	PosdatumSlice []*Posdatum
	// PosdatumHook is the signature for custom Posdatum hook methods
	PosdatumHook func(boil.Executor, *Posdatum) error

	posdatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	posdatumType                 = reflect.TypeOf(&Posdatum{})
	posdatumMapping              = queries.MakeStructMapping(posdatumType)
	posdatumPrimaryKeyMapping, _ = queries.BindMapping(posdatumType, posdatumMapping, posdatumPrimaryKeyColumns)
	posdatumInsertCacheMut       sync.RWMutex
	posdatumInsertCache          = make(map[string]insertCache)
	posdatumUpdateCacheMut       sync.RWMutex
	posdatumUpdateCache          = make(map[string]updateCache)
	posdatumUpsertCacheMut       sync.RWMutex
	posdatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var posdatumBeforeInsertHooks []PosdatumHook
var posdatumBeforeUpdateHooks []PosdatumHook
var posdatumBeforeDeleteHooks []PosdatumHook
var posdatumBeforeUpsertHooks []PosdatumHook

var posdatumAfterInsertHooks []PosdatumHook
var posdatumAfterSelectHooks []PosdatumHook
var posdatumAfterUpdateHooks []PosdatumHook
var posdatumAfterDeleteHooks []PosdatumHook
var posdatumAfterUpsertHooks []PosdatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Posdatum) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatumBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Posdatum) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatumBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Posdatum) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatumBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Posdatum) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatumBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Posdatum) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatumAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Posdatum) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatumAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Posdatum) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatumAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Posdatum) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatumAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Posdatum) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatumAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPosdatumHook registers your hook function for all future operations.
func AddPosdatumHook(hookPoint boil.HookPoint, posdatumHook PosdatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		posdatumBeforeInsertHooks = append(posdatumBeforeInsertHooks, posdatumHook)
	case boil.BeforeUpdateHook:
		posdatumBeforeUpdateHooks = append(posdatumBeforeUpdateHooks, posdatumHook)
	case boil.BeforeDeleteHook:
		posdatumBeforeDeleteHooks = append(posdatumBeforeDeleteHooks, posdatumHook)
	case boil.BeforeUpsertHook:
		posdatumBeforeUpsertHooks = append(posdatumBeforeUpsertHooks, posdatumHook)
	case boil.AfterInsertHook:
		posdatumAfterInsertHooks = append(posdatumAfterInsertHooks, posdatumHook)
	case boil.AfterSelectHook:
		posdatumAfterSelectHooks = append(posdatumAfterSelectHooks, posdatumHook)
	case boil.AfterUpdateHook:
		posdatumAfterUpdateHooks = append(posdatumAfterUpdateHooks, posdatumHook)
	case boil.AfterDeleteHook:
		posdatumAfterDeleteHooks = append(posdatumAfterDeleteHooks, posdatumHook)
	case boil.AfterUpsertHook:
		posdatumAfterUpsertHooks = append(posdatumAfterUpsertHooks, posdatumHook)
	}
}

// OneP returns a single posdatum record from the query, and panics on error.
func (q posdatumQuery) OneP() *Posdatum {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single posdatum record from the query.
func (q posdatumQuery) One() (*Posdatum, error) {
	o := &Posdatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for posdata")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Posdatum records from the query, and panics on error.
func (q posdatumQuery) AllP() PosdatumSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Posdatum records from the query.
func (q posdatumQuery) All() (PosdatumSlice, error) {
	var o []*Posdatum

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Posdatum slice")
	}

	if len(posdatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Posdatum records in the query, and panics on error.
func (q posdatumQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Posdatum records in the query.
func (q posdatumQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count posdata rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q posdatumQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q posdatumQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if posdata exists")
	}

	return count > 0, nil
}

// PosdataG retrieves all records.
func PosdataG(mods ...qm.QueryMod) posdatumQuery {
	return Posdata(boil.GetDB(), mods...)
}

// Posdata retrieves all the records using an executor.
func Posdata(exec boil.Executor, mods ...qm.QueryMod) posdatumQuery {
	mods = append(mods, qm.From("\"posdata\""))
	return posdatumQuery{NewQuery(exec, mods...)}
}

// FindPosdatumG retrieves a single record by ID.
func FindPosdatumG(id int, selectCols ...string) (*Posdatum, error) {
	return FindPosdatum(boil.GetDB(), id, selectCols...)
}

// FindPosdatumGP retrieves a single record by ID, and panics on error.
func FindPosdatumGP(id int, selectCols ...string) *Posdatum {
	retobj, err := FindPosdatum(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPosdatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPosdatum(exec boil.Executor, id int, selectCols ...string) (*Posdatum, error) {
	posdatumObj := &Posdatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"posdata\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(posdatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from posdata")
	}

	return posdatumObj, nil
}

// FindPosdatumP retrieves a single record by ID with an executor, and panics on error.
func FindPosdatumP(exec boil.Executor, id int, selectCols ...string) *Posdatum {
	retobj, err := FindPosdatum(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Posdatum) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Posdatum) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Posdatum) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Posdatum) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no posdata provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(posdatumColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	posdatumInsertCacheMut.RLock()
	cache, cached := posdatumInsertCache[key]
	posdatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			posdatumColumns,
			posdatumColumnsWithDefault,
			posdatumColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(posdatumType, posdatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(posdatumType, posdatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"posdata\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"posdata\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into posdata")
	}

	if !cached {
		posdatumInsertCacheMut.Lock()
		posdatumInsertCache[key] = cache
		posdatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Posdatum record. See Update for
// whitelist behavior description.
func (o *Posdatum) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Posdatum record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Posdatum) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Posdatum, and panics on error.
// See Update for whitelist behavior description.
func (o *Posdatum) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Posdatum.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Posdatum) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	posdatumUpdateCacheMut.RLock()
	cache, cached := posdatumUpdateCache[key]
	posdatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			posdatumColumns,
			posdatumPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update posdata, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"posdata\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, posdatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(posdatumType, posdatumMapping, append(wl, posdatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update posdata row")
	}

	if !cached {
		posdatumUpdateCacheMut.Lock()
		posdatumUpdateCache[key] = cache
		posdatumUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q posdatumQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q posdatumQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for posdata")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PosdatumSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PosdatumSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PosdatumSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PosdatumSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), posdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"posdata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, posdatumPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in posdatum slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Posdatum) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Posdatum) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Posdatum) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Posdatum) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no posdata provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(posdatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	posdatumUpsertCacheMut.RLock()
	cache, cached := posdatumUpsertCache[key]
	posdatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			posdatumColumns,
			posdatumColumnsWithDefault,
			posdatumColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			posdatumColumns,
			posdatumPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert posdata, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(posdatumPrimaryKeyColumns))
			copy(conflict, posdatumPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"posdata\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(posdatumType, posdatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(posdatumType, posdatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert posdata")
	}

	if !cached {
		posdatumUpsertCacheMut.Lock()
		posdatumUpsertCache[key] = cache
		posdatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Posdatum record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Posdatum) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Posdatum record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Posdatum) DeleteG() error {
	if o == nil {
		return errors.New("models: no Posdatum provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Posdatum record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Posdatum) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Posdatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Posdatum) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Posdatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), posdatumPrimaryKeyMapping)
	sql := "DELETE FROM \"posdata\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from posdata")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q posdatumQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q posdatumQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no posdatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from posdata")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PosdatumSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PosdatumSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Posdatum slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PosdatumSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PosdatumSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Posdatum slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(posdatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), posdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"posdata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, posdatumPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from posdatum slice")
	}

	if len(posdatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Posdatum) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Posdatum) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Posdatum) ReloadG() error {
	if o == nil {
		return errors.New("models: no Posdatum provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Posdatum) Reload(exec boil.Executor) error {
	ret, err := FindPosdatum(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PosdatumSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PosdatumSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PosdatumSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty PosdatumSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PosdatumSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	posdata := PosdatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), posdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"posdata\".* FROM \"posdata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, posdatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&posdata)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PosdatumSlice")
	}

	*o = posdata

	return nil
}

// PosdatumExists checks if the Posdatum row exists.
func PosdatumExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"posdata\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if posdata exists")
	}

	return exists, nil
}

// PosdatumExistsG checks if the Posdatum row exists.
func PosdatumExistsG(id int) (bool, error) {
	return PosdatumExists(boil.GetDB(), id)
}

// PosdatumExistsGP checks if the Posdatum row exists. Panics on error.
func PosdatumExistsGP(id int) bool {
	e, err := PosdatumExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PosdatumExistsP checks if the Posdatum row exists. Panics on error.
func PosdatumExistsP(exec boil.Executor, id int) bool {
	e, err := PosdatumExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
