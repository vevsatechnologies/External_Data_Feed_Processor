// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testBittrexHistoricData(t *testing.T) {
	t.Parallel()

	query := BittrexHistoricData(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testBittrexHistoricDataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bittrexHistoricDatum := &BittrexHistoricDatum{}
	if err = randomize.Struct(seed, bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = bittrexHistoricDatum.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := BittrexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBittrexHistoricDataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bittrexHistoricDatum := &BittrexHistoricDatum{}
	if err = randomize.Struct(seed, bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = BittrexHistoricData(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := BittrexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBittrexHistoricDataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bittrexHistoricDatum := &BittrexHistoricDatum{}
	if err = randomize.Struct(seed, bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BittrexHistoricDatumSlice{bittrexHistoricDatum}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := BittrexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testBittrexHistoricDataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bittrexHistoricDatum := &BittrexHistoricDatum{}
	if err = randomize.Struct(seed, bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := BittrexHistoricDatumExists(tx, bittrexHistoricDatum.ID)
	if err != nil {
		t.Errorf("Unable to check if BittrexHistoricDatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BittrexHistoricDatumExistsG to return true, but got false.")
	}
}
func testBittrexHistoricDataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bittrexHistoricDatum := &BittrexHistoricDatum{}
	if err = randomize.Struct(seed, bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	bittrexHistoricDatumFound, err := FindBittrexHistoricDatum(tx, bittrexHistoricDatum.ID)
	if err != nil {
		t.Error(err)
	}

	if bittrexHistoricDatumFound == nil {
		t.Error("want a record, got nil")
	}
}
func testBittrexHistoricDataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bittrexHistoricDatum := &BittrexHistoricDatum{}
	if err = randomize.Struct(seed, bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = BittrexHistoricData(tx).Bind(bittrexHistoricDatum); err != nil {
		t.Error(err)
	}
}

func testBittrexHistoricDataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bittrexHistoricDatum := &BittrexHistoricDatum{}
	if err = randomize.Struct(seed, bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := BittrexHistoricData(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBittrexHistoricDataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bittrexHistoricDatumOne := &BittrexHistoricDatum{}
	bittrexHistoricDatumTwo := &BittrexHistoricDatum{}
	if err = randomize.Struct(seed, bittrexHistoricDatumOne, bittrexHistoricDatumDBTypes, false, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, bittrexHistoricDatumTwo, bittrexHistoricDatumDBTypes, false, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatumOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = bittrexHistoricDatumTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := BittrexHistoricData(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBittrexHistoricDataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bittrexHistoricDatumOne := &BittrexHistoricDatum{}
	bittrexHistoricDatumTwo := &BittrexHistoricDatum{}
	if err = randomize.Struct(seed, bittrexHistoricDatumOne, bittrexHistoricDatumDBTypes, false, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, bittrexHistoricDatumTwo, bittrexHistoricDatumDBTypes, false, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatumOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = bittrexHistoricDatumTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := BittrexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func bittrexHistoricDatumBeforeInsertHook(e boil.Executor, o *BittrexHistoricDatum) error {
	*o = BittrexHistoricDatum{}
	return nil
}

func bittrexHistoricDatumAfterInsertHook(e boil.Executor, o *BittrexHistoricDatum) error {
	*o = BittrexHistoricDatum{}
	return nil
}

func bittrexHistoricDatumAfterSelectHook(e boil.Executor, o *BittrexHistoricDatum) error {
	*o = BittrexHistoricDatum{}
	return nil
}

func bittrexHistoricDatumBeforeUpdateHook(e boil.Executor, o *BittrexHistoricDatum) error {
	*o = BittrexHistoricDatum{}
	return nil
}

func bittrexHistoricDatumAfterUpdateHook(e boil.Executor, o *BittrexHistoricDatum) error {
	*o = BittrexHistoricDatum{}
	return nil
}

func bittrexHistoricDatumBeforeDeleteHook(e boil.Executor, o *BittrexHistoricDatum) error {
	*o = BittrexHistoricDatum{}
	return nil
}

func bittrexHistoricDatumAfterDeleteHook(e boil.Executor, o *BittrexHistoricDatum) error {
	*o = BittrexHistoricDatum{}
	return nil
}

func bittrexHistoricDatumBeforeUpsertHook(e boil.Executor, o *BittrexHistoricDatum) error {
	*o = BittrexHistoricDatum{}
	return nil
}

func bittrexHistoricDatumAfterUpsertHook(e boil.Executor, o *BittrexHistoricDatum) error {
	*o = BittrexHistoricDatum{}
	return nil
}

func testBittrexHistoricDataHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &BittrexHistoricDatum{}
	o := &BittrexHistoricDatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bittrexHistoricDatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum object: %s", err)
	}

	AddBittrexHistoricDatumHook(boil.BeforeInsertHook, bittrexHistoricDatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bittrexHistoricDatumBeforeInsertHooks = []BittrexHistoricDatumHook{}

	AddBittrexHistoricDatumHook(boil.AfterInsertHook, bittrexHistoricDatumAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bittrexHistoricDatumAfterInsertHooks = []BittrexHistoricDatumHook{}

	AddBittrexHistoricDatumHook(boil.AfterSelectHook, bittrexHistoricDatumAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bittrexHistoricDatumAfterSelectHooks = []BittrexHistoricDatumHook{}

	AddBittrexHistoricDatumHook(boil.BeforeUpdateHook, bittrexHistoricDatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bittrexHistoricDatumBeforeUpdateHooks = []BittrexHistoricDatumHook{}

	AddBittrexHistoricDatumHook(boil.AfterUpdateHook, bittrexHistoricDatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bittrexHistoricDatumAfterUpdateHooks = []BittrexHistoricDatumHook{}

	AddBittrexHistoricDatumHook(boil.BeforeDeleteHook, bittrexHistoricDatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bittrexHistoricDatumBeforeDeleteHooks = []BittrexHistoricDatumHook{}

	AddBittrexHistoricDatumHook(boil.AfterDeleteHook, bittrexHistoricDatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bittrexHistoricDatumAfterDeleteHooks = []BittrexHistoricDatumHook{}

	AddBittrexHistoricDatumHook(boil.BeforeUpsertHook, bittrexHistoricDatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bittrexHistoricDatumBeforeUpsertHooks = []BittrexHistoricDatumHook{}

	AddBittrexHistoricDatumHook(boil.AfterUpsertHook, bittrexHistoricDatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bittrexHistoricDatumAfterUpsertHooks = []BittrexHistoricDatumHook{}
}
func testBittrexHistoricDataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bittrexHistoricDatum := &BittrexHistoricDatum{}
	if err = randomize.Struct(seed, bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := BittrexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBittrexHistoricDataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bittrexHistoricDatum := &BittrexHistoricDatum{}
	if err = randomize.Struct(seed, bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatum.Insert(tx, bittrexHistoricDatumColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := BittrexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBittrexHistoricDataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bittrexHistoricDatum := &BittrexHistoricDatum{}
	if err = randomize.Struct(seed, bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = bittrexHistoricDatum.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testBittrexHistoricDataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bittrexHistoricDatum := &BittrexHistoricDatum{}
	if err = randomize.Struct(seed, bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BittrexHistoricDatumSlice{bittrexHistoricDatum}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testBittrexHistoricDataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bittrexHistoricDatum := &BittrexHistoricDatum{}
	if err = randomize.Struct(seed, bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := BittrexHistoricData(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bittrexHistoricDatumDBTypes = map[string]string{`FillType`: `character varying`, `ID`: `integer`, `OrderType`: `character varying`, `Price`: `character varying`, `Quantity`: `character varying`, `Timestamp`: `timestamp without time zone`, `Total`: `character varying`, `Tradeid`: `character varying`}
	_                           = bytes.MinRead
)

func testBittrexHistoricDataUpdate(t *testing.T) {
	t.Parallel()

	if len(bittrexHistoricDatumColumns) == len(bittrexHistoricDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	bittrexHistoricDatum := &BittrexHistoricDatum{}
	if err = randomize.Struct(seed, bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := BittrexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	if err = bittrexHistoricDatum.Update(tx); err != nil {
		t.Error(err)
	}
}

func testBittrexHistoricDataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bittrexHistoricDatumColumns) == len(bittrexHistoricDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	bittrexHistoricDatum := &BittrexHistoricDatum{}
	if err = randomize.Struct(seed, bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true, bittrexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := BittrexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true, bittrexHistoricDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bittrexHistoricDatumColumns, bittrexHistoricDatumPrimaryKeyColumns) {
		fields = bittrexHistoricDatumColumns
	} else {
		fields = strmangle.SetComplement(
			bittrexHistoricDatumColumns,
			bittrexHistoricDatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(bittrexHistoricDatum))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := BittrexHistoricDatumSlice{bittrexHistoricDatum}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testBittrexHistoricDataUpsert(t *testing.T) {
	t.Parallel()

	if len(bittrexHistoricDatumColumns) == len(bittrexHistoricDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	bittrexHistoricDatum := BittrexHistoricDatum{}
	if err = randomize.Struct(seed, &bittrexHistoricDatum, bittrexHistoricDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bittrexHistoricDatum.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert BittrexHistoricDatum: %s", err)
	}

	count, err := BittrexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &bittrexHistoricDatum, bittrexHistoricDatumDBTypes, false, bittrexHistoricDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BittrexHistoricDatum struct: %s", err)
	}

	if err = bittrexHistoricDatum.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert BittrexHistoricDatum: %s", err)
	}

	count, err = BittrexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
