// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// PowDatum is an object representing the database table.
type PowDatum struct {
	ID                  int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	Hashrate            null.Float64 `boil:"hashrate" json:"hashrate,omitempty" toml:"hashrate" yaml:"hashrate,omitempty"`
	Efficiency          null.Float64 `boil:"efficiency" json:"efficiency,omitempty" toml:"efficiency" yaml:"efficiency,omitempty"`
	Progress            null.Float64 `boil:"progress" json:"progress,omitempty" toml:"progress" yaml:"progress,omitempty"`
	Workers             null.Float64 `boil:"workers" json:"workers,omitempty" toml:"workers" yaml:"workers,omitempty"`
	Currentnetworkblock null.Float64 `boil:"currentnetworkblock" json:"currentnetworkblock,omitempty" toml:"currentnetworkblock" yaml:"currentnetworkblock,omitempty"`
	Nextnetworkblock    null.Float64 `boil:"nextnetworkblock" json:"nextnetworkblock,omitempty" toml:"nextnetworkblock" yaml:"nextnetworkblock,omitempty"`
	Lastblock           null.Float64 `boil:"lastblock" json:"lastblock,omitempty" toml:"lastblock" yaml:"lastblock,omitempty"`
	Networkdiff         null.Float64 `boil:"networkdiff" json:"networkdiff,omitempty" toml:"networkdiff" yaml:"networkdiff,omitempty"`
	Esttime             null.Float64 `boil:"esttime" json:"esttime,omitempty" toml:"esttime" yaml:"esttime,omitempty"`
	Estshare            null.Float64 `boil:"estshare" json:"estshare,omitempty" toml:"estshare" yaml:"estshare,omitempty"`
	Timesincelast       null.Float64 `boil:"timesincelast" json:"timesincelast,omitempty" toml:"timesincelast" yaml:"timesincelast,omitempty"`
	Nethashrate         null.Float64 `boil:"nethashrate" json:"nethashrate,omitempty" toml:"nethashrate" yaml:"nethashrate,omitempty"`
	Blocksfound         null.Float64 `boil:"blocksfound" json:"blocksfound,omitempty" toml:"blocksfound" yaml:"blocksfound,omitempty"`
	Totalminers         null.Float64 `boil:"totalminers" json:"totalminers,omitempty" toml:"totalminers" yaml:"totalminers,omitempty"`
	Time                null.Float64 `boil:"time" json:"time,omitempty" toml:"time" yaml:"time,omitempty"`
	Networkdifficulty   null.Float64 `boil:"networkdifficulty" json:"networkdifficulty,omitempty" toml:"networkdifficulty" yaml:"networkdifficulty,omitempty"`
	Coinprice           null.Float64 `boil:"coinprice" json:"coinprice,omitempty" toml:"coinprice" yaml:"coinprice,omitempty"`
	Btcprice            null.Float64 `boil:"btcprice" json:"btcprice,omitempty" toml:"btcprice" yaml:"btcprice,omitempty"`
	Est                 null.Float64 `boil:"est" json:"est,omitempty" toml:"est" yaml:"est,omitempty"`
	Date                null.Float64 `boil:"date" json:"date,omitempty" toml:"date" yaml:"date,omitempty"`
	Blocksper           null.Float64 `boil:"blocksper" json:"blocksper,omitempty" toml:"blocksper" yaml:"blocksper,omitempty"`
	Luck                null.Float64 `boil:"luck" json:"luck,omitempty" toml:"luck" yaml:"luck,omitempty"`
	Ppshare             null.Float64 `boil:"ppshare" json:"ppshare,omitempty" toml:"ppshare" yaml:"ppshare,omitempty"`
	Totalkickback       null.Float64 `boil:"totalkickback" json:"totalkickback,omitempty" toml:"totalkickback" yaml:"totalkickback,omitempty"`
	Success             null.String  `boil:"success" json:"success,omitempty" toml:"success" yaml:"success,omitempty"`
	Lastupdate          null.Float64 `boil:"lastupdate" json:"lastupdate,omitempty" toml:"lastupdate" yaml:"lastupdate,omitempty"`
	Name                null.String  `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Port                null.Float64 `boil:"port" json:"port,omitempty" toml:"port" yaml:"port,omitempty"`
	Fees                null.Float64 `boil:"fees" json:"fees,omitempty" toml:"fees" yaml:"fees,omitempty"`
	Estimatecurrent     null.Float64 `boil:"estimatecurrent" json:"estimatecurrent,omitempty" toml:"estimatecurrent" yaml:"estimatecurrent,omitempty"`
	Estimatelast24h     null.Float64 `boil:"estimatelast24h" json:"estimatelast24h,omitempty" toml:"estimatelast24h" yaml:"estimatelast24h,omitempty"`
	Actual124h          null.Float64 `boil:"actual124h" json:"actual124h,omitempty" toml:"actual124h" yaml:"actual124h,omitempty"`
	Mbtcmhfactor        null.Float64 `boil:"mbtcmhfactor" json:"mbtcmhfactor,omitempty" toml:"mbtcmhfactor" yaml:"mbtcmhfactor,omitempty"`
	Hashratelast24h     null.Float64 `boil:"hashratelast24h" json:"hashratelast24h,omitempty" toml:"hashratelast24h" yaml:"hashratelast24h,omitempty"`
	Rentalcurrent       null.Float64 `boil:"rentalcurrent" json:"rentalcurrent,omitempty" toml:"rentalcurrent" yaml:"rentalcurrent,omitempty"`
	Height              null.Float64 `boil:"height" json:"height,omitempty" toml:"height" yaml:"height,omitempty"`
	Blocks24h           null.Float64 `boil:"blocks24h" json:"blocks24h,omitempty" toml:"blocks24h" yaml:"blocks24h,omitempty"`
	BTC24H              null.Float64 `boil:"btc24h" json:"btc24h,omitempty" toml:"btc24h" yaml:"btc24h,omitempty"`
	Currentheight       null.Float64 `boil:"currentheight" json:"currentheight,omitempty" toml:"currentheight" yaml:"currentheight,omitempty"`
	Total               null.Float64 `boil:"total" json:"total,omitempty" toml:"total" yaml:"total,omitempty"`
	Pos                 null.Float64 `boil:"pos" json:"pos,omitempty" toml:"pos" yaml:"pos,omitempty"`
	Pow                 null.Float64 `boil:"pow" json:"pow,omitempty" toml:"pow" yaml:"pow,omitempty"`
	Dev                 null.Float64 `boil:"dev" json:"dev,omitempty" toml:"dev" yaml:"dev,omitempty"`
	Powid               null.Float64 `boil:"powid" json:"powid,omitempty" toml:"powid" yaml:"powid,omitempty"`

	R *powDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L powDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PowDatumColumns = struct {
	ID                  string
	Hashrate            string
	Efficiency          string
	Progress            string
	Workers             string
	Currentnetworkblock string
	Nextnetworkblock    string
	Lastblock           string
	Networkdiff         string
	Esttime             string
	Estshare            string
	Timesincelast       string
	Nethashrate         string
	Blocksfound         string
	Totalminers         string
	Time                string
	Networkdifficulty   string
	Coinprice           string
	Btcprice            string
	Est                 string
	Date                string
	Blocksper           string
	Luck                string
	Ppshare             string
	Totalkickback       string
	Success             string
	Lastupdate          string
	Name                string
	Port                string
	Fees                string
	Estimatecurrent     string
	Estimatelast24h     string
	Actual124h          string
	Mbtcmhfactor        string
	Hashratelast24h     string
	Rentalcurrent       string
	Height              string
	Blocks24h           string
	BTC24H              string
	Currentheight       string
	Total               string
	Pos                 string
	Pow                 string
	Dev                 string
	Powid               string
}{
	ID:                  "id",
	Hashrate:            "hashrate",
	Efficiency:          "efficiency",
	Progress:            "progress",
	Workers:             "workers",
	Currentnetworkblock: "currentnetworkblock",
	Nextnetworkblock:    "nextnetworkblock",
	Lastblock:           "lastblock",
	Networkdiff:         "networkdiff",
	Esttime:             "esttime",
	Estshare:            "estshare",
	Timesincelast:       "timesincelast",
	Nethashrate:         "nethashrate",
	Blocksfound:         "blocksfound",
	Totalminers:         "totalminers",
	Time:                "time",
	Networkdifficulty:   "networkdifficulty",
	Coinprice:           "coinprice",
	Btcprice:            "btcprice",
	Est:                 "est",
	Date:                "date",
	Blocksper:           "blocksper",
	Luck:                "luck",
	Ppshare:             "ppshare",
	Totalkickback:       "totalkickback",
	Success:             "success",
	Lastupdate:          "lastupdate",
	Name:                "name",
	Port:                "port",
	Fees:                "fees",
	Estimatecurrent:     "estimatecurrent",
	Estimatelast24h:     "estimatelast24h",
	Actual124h:          "actual124h",
	Mbtcmhfactor:        "mbtcmhfactor",
	Hashratelast24h:     "hashratelast24h",
	Rentalcurrent:       "rentalcurrent",
	Height:              "height",
	Blocks24h:           "blocks24h",
	BTC24H:              "btc24h",
	Currentheight:       "currentheight",
	Total:               "total",
	Pos:                 "pos",
	Pow:                 "pow",
	Dev:                 "dev",
	Powid:               "powid",
}

// powDatumR is where relationships are stored.
type powDatumR struct {
}

// powDatumL is where Load methods for each relationship are stored.
type powDatumL struct{}

var (
	powDatumColumns               = []string{"id", "hashrate", "efficiency", "progress", "workers", "currentnetworkblock", "nextnetworkblock", "lastblock", "networkdiff", "esttime", "estshare", "timesincelast", "nethashrate", "blocksfound", "totalminers", "time", "networkdifficulty", "coinprice", "btcprice", "est", "date", "blocksper", "luck", "ppshare", "totalkickback", "success", "lastupdate", "name", "port", "fees", "estimatecurrent", "estimatelast24h", "actual124h", "mbtcmhfactor", "hashratelast24h", "rentalcurrent", "height", "blocks24h", "btc24h", "currentheight", "total", "pos", "pow", "dev", "powid"}
	powDatumColumnsWithoutDefault = []string{"hashrate", "efficiency", "progress", "workers", "currentnetworkblock", "nextnetworkblock", "lastblock", "networkdiff", "esttime", "estshare", "timesincelast", "nethashrate", "blocksfound", "totalminers", "time", "networkdifficulty", "coinprice", "btcprice", "est", "date", "blocksper", "luck", "ppshare", "totalkickback", "success", "lastupdate", "name", "port", "fees", "estimatecurrent", "estimatelast24h", "actual124h", "mbtcmhfactor", "hashratelast24h", "rentalcurrent", "height", "blocks24h", "btc24h", "currentheight", "total", "pos", "pow", "dev", "powid"}
	powDatumColumnsWithDefault    = []string{"id"}
	powDatumPrimaryKeyColumns     = []string{"id"}
)

type (
	// PowDatumSlice is an alias for a slice of pointers to PowDatum.
	// This should generally be used opposed to []PowDatum.
	PowDatumSlice []*PowDatum
	// PowDatumHook is the signature for custom PowDatum hook methods
	PowDatumHook func(boil.Executor, *PowDatum) error

	powDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	powDatumType                 = reflect.TypeOf(&PowDatum{})
	powDatumMapping              = queries.MakeStructMapping(powDatumType)
	powDatumPrimaryKeyMapping, _ = queries.BindMapping(powDatumType, powDatumMapping, powDatumPrimaryKeyColumns)
	powDatumInsertCacheMut       sync.RWMutex
	powDatumInsertCache          = make(map[string]insertCache)
	powDatumUpdateCacheMut       sync.RWMutex
	powDatumUpdateCache          = make(map[string]updateCache)
	powDatumUpsertCacheMut       sync.RWMutex
	powDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var powDatumBeforeInsertHooks []PowDatumHook
var powDatumBeforeUpdateHooks []PowDatumHook
var powDatumBeforeDeleteHooks []PowDatumHook
var powDatumBeforeUpsertHooks []PowDatumHook

var powDatumAfterInsertHooks []PowDatumHook
var powDatumAfterSelectHooks []PowDatumHook
var powDatumAfterUpdateHooks []PowDatumHook
var powDatumAfterDeleteHooks []PowDatumHook
var powDatumAfterUpsertHooks []PowDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PowDatum) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range powDatumBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PowDatum) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range powDatumBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PowDatum) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range powDatumBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PowDatum) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range powDatumBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PowDatum) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range powDatumAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PowDatum) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range powDatumAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PowDatum) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range powDatumAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PowDatum) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range powDatumAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PowDatum) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range powDatumAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPowDatumHook registers your hook function for all future operations.
func AddPowDatumHook(hookPoint boil.HookPoint, powDatumHook PowDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		powDatumBeforeInsertHooks = append(powDatumBeforeInsertHooks, powDatumHook)
	case boil.BeforeUpdateHook:
		powDatumBeforeUpdateHooks = append(powDatumBeforeUpdateHooks, powDatumHook)
	case boil.BeforeDeleteHook:
		powDatumBeforeDeleteHooks = append(powDatumBeforeDeleteHooks, powDatumHook)
	case boil.BeforeUpsertHook:
		powDatumBeforeUpsertHooks = append(powDatumBeforeUpsertHooks, powDatumHook)
	case boil.AfterInsertHook:
		powDatumAfterInsertHooks = append(powDatumAfterInsertHooks, powDatumHook)
	case boil.AfterSelectHook:
		powDatumAfterSelectHooks = append(powDatumAfterSelectHooks, powDatumHook)
	case boil.AfterUpdateHook:
		powDatumAfterUpdateHooks = append(powDatumAfterUpdateHooks, powDatumHook)
	case boil.AfterDeleteHook:
		powDatumAfterDeleteHooks = append(powDatumAfterDeleteHooks, powDatumHook)
	case boil.AfterUpsertHook:
		powDatumAfterUpsertHooks = append(powDatumAfterUpsertHooks, powDatumHook)
	}
}

// OneP returns a single powDatum record from the query, and panics on error.
func (q powDatumQuery) OneP() *PowDatum {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single powDatum record from the query.
func (q powDatumQuery) One() (*PowDatum, error) {
	o := &PowDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pow_data")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all PowDatum records from the query, and panics on error.
func (q powDatumQuery) AllP() PowDatumSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all PowDatum records from the query.
func (q powDatumQuery) All() (PowDatumSlice, error) {
	var o []*PowDatum

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PowDatum slice")
	}

	if len(powDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all PowDatum records in the query, and panics on error.
func (q powDatumQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all PowDatum records in the query.
func (q powDatumQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pow_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q powDatumQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q powDatumQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pow_data exists")
	}

	return count > 0, nil
}

// PowDataG retrieves all records.
func PowDataG(mods ...qm.QueryMod) powDatumQuery {
	return PowData(boil.GetDB(), mods...)
}

// PowData retrieves all the records using an executor.
func PowData(exec boil.Executor, mods ...qm.QueryMod) powDatumQuery {
	mods = append(mods, qm.From("\"pow_data\""))
	return powDatumQuery{NewQuery(exec, mods...)}
}

// FindPowDatumG retrieves a single record by ID.
func FindPowDatumG(id int, selectCols ...string) (*PowDatum, error) {
	return FindPowDatum(boil.GetDB(), id, selectCols...)
}

// FindPowDatumGP retrieves a single record by ID, and panics on error.
func FindPowDatumGP(id int, selectCols ...string) *PowDatum {
	retobj, err := FindPowDatum(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPowDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPowDatum(exec boil.Executor, id int, selectCols ...string) (*PowDatum, error) {
	powDatumObj := &PowDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pow_data\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(powDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pow_data")
	}

	return powDatumObj, nil
}

// FindPowDatumP retrieves a single record by ID with an executor, and panics on error.
func FindPowDatumP(exec boil.Executor, id int, selectCols ...string) *PowDatum {
	retobj, err := FindPowDatum(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PowDatum) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *PowDatum) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *PowDatum) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *PowDatum) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no pow_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(powDatumColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	powDatumInsertCacheMut.RLock()
	cache, cached := powDatumInsertCache[key]
	powDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			powDatumColumns,
			powDatumColumnsWithDefault,
			powDatumColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(powDatumType, powDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(powDatumType, powDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pow_data\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pow_data\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pow_data")
	}

	if !cached {
		powDatumInsertCacheMut.Lock()
		powDatumInsertCache[key] = cache
		powDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single PowDatum record. See Update for
// whitelist behavior description.
func (o *PowDatum) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single PowDatum record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *PowDatum) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the PowDatum, and panics on error.
// See Update for whitelist behavior description.
func (o *PowDatum) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the PowDatum.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *PowDatum) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	powDatumUpdateCacheMut.RLock()
	cache, cached := powDatumUpdateCache[key]
	powDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			powDatumColumns,
			powDatumPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update pow_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pow_data\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, powDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(powDatumType, powDatumMapping, append(wl, powDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update pow_data row")
	}

	if !cached {
		powDatumUpdateCacheMut.Lock()
		powDatumUpdateCache[key] = cache
		powDatumUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q powDatumQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q powDatumQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for pow_data")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PowDatumSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PowDatumSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PowDatumSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PowDatumSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pow_data\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, powDatumPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in powDatum slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PowDatum) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *PowDatum) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *PowDatum) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *PowDatum) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no pow_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(powDatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	powDatumUpsertCacheMut.RLock()
	cache, cached := powDatumUpsertCache[key]
	powDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			powDatumColumns,
			powDatumColumnsWithDefault,
			powDatumColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			powDatumColumns,
			powDatumPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert pow_data, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(powDatumPrimaryKeyColumns))
			copy(conflict, powDatumPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"pow_data\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(powDatumType, powDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(powDatumType, powDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pow_data")
	}

	if !cached {
		powDatumUpsertCacheMut.Lock()
		powDatumUpsertCache[key] = cache
		powDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single PowDatum record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *PowDatum) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single PowDatum record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PowDatum) DeleteG() error {
	if o == nil {
		return errors.New("models: no PowDatum provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single PowDatum record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *PowDatum) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single PowDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PowDatum) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no PowDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), powDatumPrimaryKeyMapping)
	sql := "DELETE FROM \"pow_data\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from pow_data")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q powDatumQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q powDatumQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no powDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from pow_data")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PowDatumSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PowDatumSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no PowDatum slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PowDatumSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PowDatumSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no PowDatum slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(powDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pow_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, powDatumPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from powDatum slice")
	}

	if len(powDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *PowDatum) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *PowDatum) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PowDatum) ReloadG() error {
	if o == nil {
		return errors.New("models: no PowDatum provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PowDatum) Reload(exec boil.Executor) error {
	ret, err := FindPowDatum(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PowDatumSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PowDatumSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PowDatumSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty PowDatumSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PowDatumSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	powData := PowDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pow_data\".* FROM \"pow_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, powDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&powData)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PowDatumSlice")
	}

	*o = powData

	return nil
}

// PowDatumExists checks if the PowDatum row exists.
func PowDatumExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pow_data\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pow_data exists")
	}

	return exists, nil
}

// PowDatumExistsG checks if the PowDatum row exists.
func PowDatumExistsG(id int) (bool, error) {
	return PowDatumExists(boil.GetDB(), id)
}

// PowDatumExistsGP checks if the PowDatum row exists. Panics on error.
func PowDatumExistsGP(id int) bool {
	e, err := PowDatumExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PowDatumExistsP checks if the PowDatum row exists. Panics on error.
func PowDatumExistsP(exec boil.Executor, id int) bool {
	e, err := PowDatumExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
