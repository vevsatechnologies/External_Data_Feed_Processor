// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testPosdata(t *testing.T) {
	t.Parallel()

	query := Posdata(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPosdataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posdatum := &Posdatum{}
	if err = randomize.Struct(seed, posdatum, posdatumDBTypes, true, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = posdatum.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Posdata(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPosdataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posdatum := &Posdatum{}
	if err = randomize.Struct(seed, posdatum, posdatumDBTypes, true, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Posdata(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Posdata(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPosdataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posdatum := &Posdatum{}
	if err = randomize.Struct(seed, posdatum, posdatumDBTypes, true, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PosdatumSlice{posdatum}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Posdata(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPosdataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posdatum := &Posdatum{}
	if err = randomize.Struct(seed, posdatum, posdatumDBTypes, true, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatum.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PosdatumExists(tx, posdatum.ID)
	if err != nil {
		t.Errorf("Unable to check if Posdatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PosdatumExistsG to return true, but got false.")
	}
}
func testPosdataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posdatum := &Posdatum{}
	if err = randomize.Struct(seed, posdatum, posdatumDBTypes, true, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatum.Insert(tx); err != nil {
		t.Error(err)
	}

	posdatumFound, err := FindPosdatum(tx, posdatum.ID)
	if err != nil {
		t.Error(err)
	}

	if posdatumFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPosdataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posdatum := &Posdatum{}
	if err = randomize.Struct(seed, posdatum, posdatumDBTypes, true, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Posdata(tx).Bind(posdatum); err != nil {
		t.Error(err)
	}
}

func testPosdataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posdatum := &Posdatum{}
	if err = randomize.Struct(seed, posdatum, posdatumDBTypes, true, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Posdata(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPosdataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posdatumOne := &Posdatum{}
	posdatumTwo := &Posdatum{}
	if err = randomize.Struct(seed, posdatumOne, posdatumDBTypes, false, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}
	if err = randomize.Struct(seed, posdatumTwo, posdatumDBTypes, false, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatumOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = posdatumTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Posdata(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPosdataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	posdatumOne := &Posdatum{}
	posdatumTwo := &Posdatum{}
	if err = randomize.Struct(seed, posdatumOne, posdatumDBTypes, false, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}
	if err = randomize.Struct(seed, posdatumTwo, posdatumDBTypes, false, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatumOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = posdatumTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Posdata(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func posdatumBeforeInsertHook(e boil.Executor, o *Posdatum) error {
	*o = Posdatum{}
	return nil
}

func posdatumAfterInsertHook(e boil.Executor, o *Posdatum) error {
	*o = Posdatum{}
	return nil
}

func posdatumAfterSelectHook(e boil.Executor, o *Posdatum) error {
	*o = Posdatum{}
	return nil
}

func posdatumBeforeUpdateHook(e boil.Executor, o *Posdatum) error {
	*o = Posdatum{}
	return nil
}

func posdatumAfterUpdateHook(e boil.Executor, o *Posdatum) error {
	*o = Posdatum{}
	return nil
}

func posdatumBeforeDeleteHook(e boil.Executor, o *Posdatum) error {
	*o = Posdatum{}
	return nil
}

func posdatumAfterDeleteHook(e boil.Executor, o *Posdatum) error {
	*o = Posdatum{}
	return nil
}

func posdatumBeforeUpsertHook(e boil.Executor, o *Posdatum) error {
	*o = Posdatum{}
	return nil
}

func posdatumAfterUpsertHook(e boil.Executor, o *Posdatum) error {
	*o = Posdatum{}
	return nil
}

func testPosdataHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Posdatum{}
	o := &Posdatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, posdatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Posdatum object: %s", err)
	}

	AddPosdatumHook(boil.BeforeInsertHook, posdatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	posdatumBeforeInsertHooks = []PosdatumHook{}

	AddPosdatumHook(boil.AfterInsertHook, posdatumAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	posdatumAfterInsertHooks = []PosdatumHook{}

	AddPosdatumHook(boil.AfterSelectHook, posdatumAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	posdatumAfterSelectHooks = []PosdatumHook{}

	AddPosdatumHook(boil.BeforeUpdateHook, posdatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	posdatumBeforeUpdateHooks = []PosdatumHook{}

	AddPosdatumHook(boil.AfterUpdateHook, posdatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	posdatumAfterUpdateHooks = []PosdatumHook{}

	AddPosdatumHook(boil.BeforeDeleteHook, posdatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	posdatumBeforeDeleteHooks = []PosdatumHook{}

	AddPosdatumHook(boil.AfterDeleteHook, posdatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	posdatumAfterDeleteHooks = []PosdatumHook{}

	AddPosdatumHook(boil.BeforeUpsertHook, posdatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	posdatumBeforeUpsertHooks = []PosdatumHook{}

	AddPosdatumHook(boil.AfterUpsertHook, posdatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	posdatumAfterUpsertHooks = []PosdatumHook{}
}
func testPosdataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posdatum := &Posdatum{}
	if err = randomize.Struct(seed, posdatum, posdatumDBTypes, true, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Posdata(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPosdataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posdatum := &Posdatum{}
	if err = randomize.Struct(seed, posdatum, posdatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatum.Insert(tx, posdatumColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Posdata(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPosdataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posdatum := &Posdatum{}
	if err = randomize.Struct(seed, posdatum, posdatumDBTypes, true, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = posdatum.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPosdataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posdatum := &Posdatum{}
	if err = randomize.Struct(seed, posdatum, posdatumDBTypes, true, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PosdatumSlice{posdatum}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPosdataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posdatum := &Posdatum{}
	if err = randomize.Struct(seed, posdatum, posdatumDBTypes, true, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Posdata(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	posdatumDBTypes = map[string]string{`Apienabled`: `character varying`, `Apiversionssupported`: `character varying`, `ID`: `integer`, `Immature`: `numeric`, `Lastupdated`: `numeric`, `Launched`: `numeric`, `Live`: `numeric`, `Missed`: `numeric`, `Network`: `character varying`, `Poolfees`: `numeric`, `Posid`: `character varying`, `Proportionlive`: `numeric`, `Proportionmissed`: `numeric`, `URL`: `character varying`, `Usercount`: `numeric`, `Usercountactive`: `numeric`, `Voted`: `numeric`}
	_               = bytes.MinRead
)

func testPosdataUpdate(t *testing.T) {
	t.Parallel()

	if len(posdatumColumns) == len(posdatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	posdatum := &Posdatum{}
	if err = randomize.Struct(seed, posdatum, posdatumDBTypes, true, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Posdata(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, posdatum, posdatumDBTypes, true, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	if err = posdatum.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPosdataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(posdatumColumns) == len(posdatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	posdatum := &Posdatum{}
	if err = randomize.Struct(seed, posdatum, posdatumDBTypes, true, posdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Posdata(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, posdatum, posdatumDBTypes, true, posdatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(posdatumColumns, posdatumPrimaryKeyColumns) {
		fields = posdatumColumns
	} else {
		fields = strmangle.SetComplement(
			posdatumColumns,
			posdatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(posdatum))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PosdatumSlice{posdatum}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPosdataUpsert(t *testing.T) {
	t.Parallel()

	if len(posdatumColumns) == len(posdatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	posdatum := Posdatum{}
	if err = randomize.Struct(seed, &posdatum, posdatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posdatum.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Posdatum: %s", err)
	}

	count, err := Posdata(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &posdatum, posdatumDBTypes, false, posdatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Posdatum struct: %s", err)
	}

	if err = posdatum.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Posdatum: %s", err)
	}

	count, err = Posdata(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
