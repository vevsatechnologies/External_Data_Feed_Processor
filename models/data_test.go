// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testData(t *testing.T) {
	t.Parallel()

	query := Data(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testDataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	datum := &Datum{}
	if err = randomize.Struct(seed, datum, datumDBTypes, true, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = datum.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Data(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	datum := &Datum{}
	if err = randomize.Struct(seed, datum, datumDBTypes, true, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Data(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Data(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	datum := &Datum{}
	if err = randomize.Struct(seed, datum, datumDBTypes, true, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := DatumSlice{datum}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Data(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testDataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	datum := &Datum{}
	if err = randomize.Struct(seed, datum, datumDBTypes, true, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datum.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := DatumExists(tx, datum.ID)
	if err != nil {
		t.Errorf("Unable to check if Datum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DatumExistsG to return true, but got false.")
	}
}
func testDataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	datum := &Datum{}
	if err = randomize.Struct(seed, datum, datumDBTypes, true, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datum.Insert(tx); err != nil {
		t.Error(err)
	}

	datumFound, err := FindDatum(tx, datum.ID)
	if err != nil {
		t.Error(err)
	}

	if datumFound == nil {
		t.Error("want a record, got nil")
	}
}
func testDataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	datum := &Datum{}
	if err = randomize.Struct(seed, datum, datumDBTypes, true, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Data(tx).Bind(datum); err != nil {
		t.Error(err)
	}
}

func testDataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	datum := &Datum{}
	if err = randomize.Struct(seed, datum, datumDBTypes, true, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datum.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Data(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	datumOne := &Datum{}
	datumTwo := &Datum{}
	if err = randomize.Struct(seed, datumOne, datumDBTypes, false, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}
	if err = randomize.Struct(seed, datumTwo, datumDBTypes, false, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datumOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = datumTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Data(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	datumOne := &Datum{}
	datumTwo := &Datum{}
	if err = randomize.Struct(seed, datumOne, datumDBTypes, false, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}
	if err = randomize.Struct(seed, datumTwo, datumDBTypes, false, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datumOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = datumTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Data(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func datumBeforeInsertHook(e boil.Executor, o *Datum) error {
	*o = Datum{}
	return nil
}

func datumAfterInsertHook(e boil.Executor, o *Datum) error {
	*o = Datum{}
	return nil
}

func datumAfterSelectHook(e boil.Executor, o *Datum) error {
	*o = Datum{}
	return nil
}

func datumBeforeUpdateHook(e boil.Executor, o *Datum) error {
	*o = Datum{}
	return nil
}

func datumAfterUpdateHook(e boil.Executor, o *Datum) error {
	*o = Datum{}
	return nil
}

func datumBeforeDeleteHook(e boil.Executor, o *Datum) error {
	*o = Datum{}
	return nil
}

func datumAfterDeleteHook(e boil.Executor, o *Datum) error {
	*o = Datum{}
	return nil
}

func datumBeforeUpsertHook(e boil.Executor, o *Datum) error {
	*o = Datum{}
	return nil
}

func datumAfterUpsertHook(e boil.Executor, o *Datum) error {
	*o = Datum{}
	return nil
}

func testDataHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Datum{}
	o := &Datum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, datumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Datum object: %s", err)
	}

	AddDatumHook(boil.BeforeInsertHook, datumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	datumBeforeInsertHooks = []DatumHook{}

	AddDatumHook(boil.AfterInsertHook, datumAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	datumAfterInsertHooks = []DatumHook{}

	AddDatumHook(boil.AfterSelectHook, datumAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	datumAfterSelectHooks = []DatumHook{}

	AddDatumHook(boil.BeforeUpdateHook, datumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	datumBeforeUpdateHooks = []DatumHook{}

	AddDatumHook(boil.AfterUpdateHook, datumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	datumAfterUpdateHooks = []DatumHook{}

	AddDatumHook(boil.BeforeDeleteHook, datumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	datumBeforeDeleteHooks = []DatumHook{}

	AddDatumHook(boil.AfterDeleteHook, datumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	datumAfterDeleteHooks = []DatumHook{}

	AddDatumHook(boil.BeforeUpsertHook, datumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	datumBeforeUpsertHooks = []DatumHook{}

	AddDatumHook(boil.AfterUpsertHook, datumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	datumAfterUpsertHooks = []DatumHook{}
}
func testDataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	datum := &Datum{}
	if err = randomize.Struct(seed, datum, datumDBTypes, true, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Data(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	datum := &Datum{}
	if err = randomize.Struct(seed, datum, datumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datum.Insert(tx, datumColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Data(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	datum := &Datum{}
	if err = randomize.Struct(seed, datum, datumDBTypes, true, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = datum.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testDataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	datum := &Datum{}
	if err = randomize.Struct(seed, datum, datumDBTypes, true, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := DatumSlice{datum}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testDataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	datum := &Datum{}
	if err = randomize.Struct(seed, datum, datumDBTypes, true, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Data(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	datumDBTypes = map[string]string{`ID`: `integer`}
	_            = bytes.MinRead
)

func testDataUpdate(t *testing.T) {
	t.Parallel()

	if len(datumColumns) == len(datumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	datum := &Datum{}
	if err = randomize.Struct(seed, datum, datumDBTypes, true, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Data(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, datum, datumDBTypes, true, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	if err = datum.Update(tx); err != nil {
		t.Error(err)
	}
}

func testDataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(datumColumns) == len(datumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	datum := &Datum{}
	if err = randomize.Struct(seed, datum, datumDBTypes, true, datumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Data(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, datum, datumDBTypes, true, datumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(datumColumns, datumPrimaryKeyColumns) {
		fields = datumColumns
	} else {
		fields = strmangle.SetComplement(
			datumColumns,
			datumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(datum))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := DatumSlice{datum}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testDataUpsert(t *testing.T) {
	t.Parallel()

	if len(datumColumns) == len(datumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	datum := Datum{}
	if err = randomize.Struct(seed, &datum, datumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = datum.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Datum: %s", err)
	}

	count, err := Data(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &datum, datumDBTypes, false, datumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Datum struct: %s", err)
	}

	if err = datum.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Datum: %s", err)
	}

	count, err = Data(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
