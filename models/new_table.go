// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// NewTable is an object representing the database table.
type NewTable struct {
	ID            int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	Exchangeid    null.Float64 `boil:"exchangeid" json:"exchangeid,omitempty" toml:"exchangeid" yaml:"exchangeid,omitempty"`
	Globaltradeid null.Float64 `boil:"globaltradeid" json:"globaltradeid,omitempty" toml:"globaltradeid" yaml:"globaltradeid,omitempty"`
	Tradeid       null.Float64 `boil:"tradeid" json:"tradeid,omitempty" toml:"tradeid" yaml:"tradeid,omitempty"`
	Timestamping  null.Time    `boil:"timestamping" json:"timestamping,omitempty" toml:"timestamping" yaml:"timestamping,omitempty"`
	Quantity      null.Float64 `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	Price         null.Float64 `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	Total         null.Float64 `boil:"total" json:"total,omitempty" toml:"total" yaml:"total,omitempty"`
	Filltype      null.String  `boil:"filltype" json:"filltype,omitempty" toml:"filltype" yaml:"filltype,omitempty"`
	Ordertype     null.String  `boil:"ordertype" json:"ordertype,omitempty" toml:"ordertype" yaml:"ordertype,omitempty"`

	R *newTableR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L newTableL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NewTableColumns = struct {
	ID            string
	Exchangeid    string
	Globaltradeid string
	Tradeid       string
	Timestamping  string
	Quantity      string
	Price         string
	Total         string
	Filltype      string
	Ordertype     string
}{
	ID:            "id",
	Exchangeid:    "exchangeid",
	Globaltradeid: "globaltradeid",
	Tradeid:       "tradeid",
	Timestamping:  "timestamping",
	Quantity:      "quantity",
	Price:         "price",
	Total:         "total",
	Filltype:      "filltype",
	Ordertype:     "ordertype",
}

// newTableR is where relationships are stored.
type newTableR struct {
}

// newTableL is where Load methods for each relationship are stored.
type newTableL struct{}

var (
	newTableColumns               = []string{"id", "exchangeid", "globaltradeid", "tradeid", "timestamping", "quantity", "price", "total", "filltype", "ordertype"}
	newTableColumnsWithoutDefault = []string{"exchangeid", "globaltradeid", "tradeid", "timestamping", "quantity", "price", "total", "filltype", "ordertype"}
	newTableColumnsWithDefault    = []string{"id"}
	newTablePrimaryKeyColumns     = []string{"id"}
)

type (
	// NewTableSlice is an alias for a slice of pointers to NewTable.
	// This should generally be used opposed to []NewTable.
	NewTableSlice []*NewTable
	// NewTableHook is the signature for custom NewTable hook methods
	NewTableHook func(boil.Executor, *NewTable) error

	newTableQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	newTableType                 = reflect.TypeOf(&NewTable{})
	newTableMapping              = queries.MakeStructMapping(newTableType)
	newTablePrimaryKeyMapping, _ = queries.BindMapping(newTableType, newTableMapping, newTablePrimaryKeyColumns)
	newTableInsertCacheMut       sync.RWMutex
	newTableInsertCache          = make(map[string]insertCache)
	newTableUpdateCacheMut       sync.RWMutex
	newTableUpdateCache          = make(map[string]updateCache)
	newTableUpsertCacheMut       sync.RWMutex
	newTableUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var newTableBeforeInsertHooks []NewTableHook
var newTableBeforeUpdateHooks []NewTableHook
var newTableBeforeDeleteHooks []NewTableHook
var newTableBeforeUpsertHooks []NewTableHook

var newTableAfterInsertHooks []NewTableHook
var newTableAfterSelectHooks []NewTableHook
var newTableAfterUpdateHooks []NewTableHook
var newTableAfterDeleteHooks []NewTableHook
var newTableAfterUpsertHooks []NewTableHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NewTable) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range newTableBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NewTable) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range newTableBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NewTable) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range newTableBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NewTable) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range newTableBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NewTable) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range newTableAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NewTable) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range newTableAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NewTable) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range newTableAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NewTable) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range newTableAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NewTable) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range newTableAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNewTableHook registers your hook function for all future operations.
func AddNewTableHook(hookPoint boil.HookPoint, newTableHook NewTableHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		newTableBeforeInsertHooks = append(newTableBeforeInsertHooks, newTableHook)
	case boil.BeforeUpdateHook:
		newTableBeforeUpdateHooks = append(newTableBeforeUpdateHooks, newTableHook)
	case boil.BeforeDeleteHook:
		newTableBeforeDeleteHooks = append(newTableBeforeDeleteHooks, newTableHook)
	case boil.BeforeUpsertHook:
		newTableBeforeUpsertHooks = append(newTableBeforeUpsertHooks, newTableHook)
	case boil.AfterInsertHook:
		newTableAfterInsertHooks = append(newTableAfterInsertHooks, newTableHook)
	case boil.AfterSelectHook:
		newTableAfterSelectHooks = append(newTableAfterSelectHooks, newTableHook)
	case boil.AfterUpdateHook:
		newTableAfterUpdateHooks = append(newTableAfterUpdateHooks, newTableHook)
	case boil.AfterDeleteHook:
		newTableAfterDeleteHooks = append(newTableAfterDeleteHooks, newTableHook)
	case boil.AfterUpsertHook:
		newTableAfterUpsertHooks = append(newTableAfterUpsertHooks, newTableHook)
	}
}

// OneP returns a single newTable record from the query, and panics on error.
func (q newTableQuery) OneP() *NewTable {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single newTable record from the query.
func (q newTableQuery) One() (*NewTable, error) {
	o := &NewTable{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for new_table")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all NewTable records from the query, and panics on error.
func (q newTableQuery) AllP() NewTableSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all NewTable records from the query.
func (q newTableQuery) All() (NewTableSlice, error) {
	var o []*NewTable

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NewTable slice")
	}

	if len(newTableAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all NewTable records in the query, and panics on error.
func (q newTableQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all NewTable records in the query.
func (q newTableQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count new_table rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q newTableQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q newTableQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if new_table exists")
	}

	return count > 0, nil
}

// NewTablesG retrieves all records.
func NewTablesG(mods ...qm.QueryMod) newTableQuery {
	return NewTables(boil.GetDB(), mods...)
}

// NewTables retrieves all the records using an executor.
func NewTables(exec boil.Executor, mods ...qm.QueryMod) newTableQuery {
	mods = append(mods, qm.From("\"new_table\""))
	return newTableQuery{NewQuery(exec, mods...)}
}

// FindNewTableG retrieves a single record by ID.
func FindNewTableG(id int, selectCols ...string) (*NewTable, error) {
	return FindNewTable(boil.GetDB(), id, selectCols...)
}

// FindNewTableGP retrieves a single record by ID, and panics on error.
func FindNewTableGP(id int, selectCols ...string) *NewTable {
	retobj, err := FindNewTable(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindNewTable retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNewTable(exec boil.Executor, id int, selectCols ...string) (*NewTable, error) {
	newTableObj := &NewTable{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"new_table\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(newTableObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from new_table")
	}

	return newTableObj, nil
}

// FindNewTableP retrieves a single record by ID with an executor, and panics on error.
func FindNewTableP(exec boil.Executor, id int, selectCols ...string) *NewTable {
	retobj, err := FindNewTable(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *NewTable) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *NewTable) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *NewTable) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *NewTable) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no new_table provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(newTableColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	newTableInsertCacheMut.RLock()
	cache, cached := newTableInsertCache[key]
	newTableInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			newTableColumns,
			newTableColumnsWithDefault,
			newTableColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(newTableType, newTableMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(newTableType, newTableMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"new_table\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"new_table\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into new_table")
	}

	if !cached {
		newTableInsertCacheMut.Lock()
		newTableInsertCache[key] = cache
		newTableInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single NewTable record. See Update for
// whitelist behavior description.
func (o *NewTable) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single NewTable record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *NewTable) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the NewTable, and panics on error.
// See Update for whitelist behavior description.
func (o *NewTable) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the NewTable.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *NewTable) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	newTableUpdateCacheMut.RLock()
	cache, cached := newTableUpdateCache[key]
	newTableUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			newTableColumns,
			newTablePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update new_table, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"new_table\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, newTablePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(newTableType, newTableMapping, append(wl, newTablePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update new_table row")
	}

	if !cached {
		newTableUpdateCacheMut.Lock()
		newTableUpdateCache[key] = cache
		newTableUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q newTableQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q newTableQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for new_table")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o NewTableSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o NewTableSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o NewTableSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NewTableSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), newTablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"new_table\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, newTablePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in newTable slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *NewTable) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *NewTable) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *NewTable) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *NewTable) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no new_table provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(newTableColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	newTableUpsertCacheMut.RLock()
	cache, cached := newTableUpsertCache[key]
	newTableUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			newTableColumns,
			newTableColumnsWithDefault,
			newTableColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			newTableColumns,
			newTablePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert new_table, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(newTablePrimaryKeyColumns))
			copy(conflict, newTablePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"new_table\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(newTableType, newTableMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(newTableType, newTableMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert new_table")
	}

	if !cached {
		newTableUpsertCacheMut.Lock()
		newTableUpsertCache[key] = cache
		newTableUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single NewTable record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *NewTable) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single NewTable record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *NewTable) DeleteG() error {
	if o == nil {
		return errors.New("models: no NewTable provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single NewTable record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *NewTable) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single NewTable record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NewTable) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no NewTable provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), newTablePrimaryKeyMapping)
	sql := "DELETE FROM \"new_table\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from new_table")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q newTableQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q newTableQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no newTableQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from new_table")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o NewTableSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o NewTableSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no NewTable slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o NewTableSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NewTableSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no NewTable slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(newTableBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), newTablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"new_table\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, newTablePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from newTable slice")
	}

	if len(newTableAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *NewTable) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *NewTable) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *NewTable) ReloadG() error {
	if o == nil {
		return errors.New("models: no NewTable provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NewTable) Reload(exec boil.Executor) error {
	ret, err := FindNewTable(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *NewTableSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *NewTableSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NewTableSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty NewTableSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NewTableSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	newTables := NewTableSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), newTablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"new_table\".* FROM \"new_table\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, newTablePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&newTables)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NewTableSlice")
	}

	*o = newTables

	return nil
}

// NewTableExists checks if the NewTable row exists.
func NewTableExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"new_table\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if new_table exists")
	}

	return exists, nil
}

// NewTableExistsG checks if the NewTable row exists.
func NewTableExistsG(id int) (bool, error) {
	return NewTableExists(boil.GetDB(), id)
}

// NewTableExistsGP checks if the NewTable row exists. Panics on error.
func NewTableExistsGP(id int) bool {
	e, err := NewTableExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// NewTableExistsP checks if the NewTable row exists. Panics on error.
func NewTableExistsP(exec boil.Executor, id int) bool {
	e, err := NewTableExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
