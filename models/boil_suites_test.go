// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("ChartData", testChartData)
	t.Run("Data", testData)
	t.Run("HistoricData", testHistoricData)
	t.Run("NewTables", testNewTables)
	t.Run("Posdata", testPosdata)
}

func TestDelete(t *testing.T) {
	t.Run("ChartData", testChartDataDelete)
	t.Run("Data", testDataDelete)
	t.Run("HistoricData", testHistoricDataDelete)
	t.Run("NewTables", testNewTablesDelete)
	t.Run("Posdata", testPosdataDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("ChartData", testChartDataQueryDeleteAll)
	t.Run("Data", testDataQueryDeleteAll)
	t.Run("HistoricData", testHistoricDataQueryDeleteAll)
	t.Run("NewTables", testNewTablesQueryDeleteAll)
	t.Run("Posdata", testPosdataQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("ChartData", testChartDataSliceDeleteAll)
	t.Run("Data", testDataSliceDeleteAll)
	t.Run("HistoricData", testHistoricDataSliceDeleteAll)
	t.Run("NewTables", testNewTablesSliceDeleteAll)
	t.Run("Posdata", testPosdataSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("ChartData", testChartDataExists)
	t.Run("Data", testDataExists)
	t.Run("HistoricData", testHistoricDataExists)
	t.Run("NewTables", testNewTablesExists)
	t.Run("Posdata", testPosdataExists)
}

func TestFind(t *testing.T) {
	t.Run("ChartData", testChartDataFind)
	t.Run("Data", testDataFind)
	t.Run("HistoricData", testHistoricDataFind)
	t.Run("NewTables", testNewTablesFind)
	t.Run("Posdata", testPosdataFind)
}

func TestBind(t *testing.T) {
	t.Run("ChartData", testChartDataBind)
	t.Run("Data", testDataBind)
	t.Run("HistoricData", testHistoricDataBind)
	t.Run("NewTables", testNewTablesBind)
	t.Run("Posdata", testPosdataBind)
}

func TestOne(t *testing.T) {
	t.Run("ChartData", testChartDataOne)
	t.Run("Data", testDataOne)
	t.Run("HistoricData", testHistoricDataOne)
	t.Run("NewTables", testNewTablesOne)
	t.Run("Posdata", testPosdataOne)
}

func TestAll(t *testing.T) {
	t.Run("ChartData", testChartDataAll)
	t.Run("Data", testDataAll)
	t.Run("HistoricData", testHistoricDataAll)
	t.Run("NewTables", testNewTablesAll)
	t.Run("Posdata", testPosdataAll)
}

func TestCount(t *testing.T) {
	t.Run("ChartData", testChartDataCount)
	t.Run("Data", testDataCount)
	t.Run("HistoricData", testHistoricDataCount)
	t.Run("NewTables", testNewTablesCount)
	t.Run("Posdata", testPosdataCount)
}

func TestHooks(t *testing.T) {
	t.Run("ChartData", testChartDataHooks)
	t.Run("Data", testDataHooks)
	t.Run("HistoricData", testHistoricDataHooks)
	t.Run("NewTables", testNewTablesHooks)
	t.Run("Posdata", testPosdataHooks)
}

func TestInsert(t *testing.T) {
	t.Run("ChartData", testChartDataInsert)
	t.Run("ChartData", testChartDataInsertWhitelist)
	t.Run("Data", testDataInsert)
	t.Run("Data", testDataInsertWhitelist)
	t.Run("HistoricData", testHistoricDataInsert)
	t.Run("HistoricData", testHistoricDataInsertWhitelist)
	t.Run("NewTables", testNewTablesInsert)
	t.Run("NewTables", testNewTablesInsertWhitelist)
	t.Run("Posdata", testPosdataInsert)
	t.Run("Posdata", testPosdataInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("ChartData", testChartDataReload)
	t.Run("Data", testDataReload)
	t.Run("HistoricData", testHistoricDataReload)
	t.Run("NewTables", testNewTablesReload)
	t.Run("Posdata", testPosdataReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("ChartData", testChartDataReloadAll)
	t.Run("Data", testDataReloadAll)
	t.Run("HistoricData", testHistoricDataReloadAll)
	t.Run("NewTables", testNewTablesReloadAll)
	t.Run("Posdata", testPosdataReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("ChartData", testChartDataSelect)
	t.Run("Data", testDataSelect)
	t.Run("HistoricData", testHistoricDataSelect)
	t.Run("NewTables", testNewTablesSelect)
	t.Run("Posdata", testPosdataSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("ChartData", testChartDataUpdate)
	t.Run("Data", testDataUpdate)
	t.Run("HistoricData", testHistoricDataUpdate)
	t.Run("NewTables", testNewTablesUpdate)
	t.Run("Posdata", testPosdataUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("ChartData", testChartDataSliceUpdateAll)
	t.Run("Data", testDataSliceUpdateAll)
	t.Run("HistoricData", testHistoricDataSliceUpdateAll)
	t.Run("NewTables", testNewTablesSliceUpdateAll)
	t.Run("Posdata", testPosdataSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("ChartData", testChartDataUpsert)
	t.Run("Data", testDataUpsert)
	t.Run("HistoricData", testHistoricDataUpsert)
	t.Run("NewTables", testNewTablesUpsert)
	t.Run("Posdata", testPosdataUpsert)
}
