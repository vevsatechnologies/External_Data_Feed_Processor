// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("ChartData", testChartData)
	t.Run("HistoricData", testHistoricData)
	t.Run("PosData", testPosData)
	t.Run("PowData", testPowData)
}

func TestDelete(t *testing.T) {
	t.Run("ChartData", testChartDataDelete)
	t.Run("HistoricData", testHistoricDataDelete)
	t.Run("PosData", testPosDataDelete)
	t.Run("PowData", testPowDataDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("ChartData", testChartDataQueryDeleteAll)
	t.Run("HistoricData", testHistoricDataQueryDeleteAll)
	t.Run("PosData", testPosDataQueryDeleteAll)
	t.Run("PowData", testPowDataQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("ChartData", testChartDataSliceDeleteAll)
	t.Run("HistoricData", testHistoricDataSliceDeleteAll)
	t.Run("PosData", testPosDataSliceDeleteAll)
	t.Run("PowData", testPowDataSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("ChartData", testChartDataExists)
	t.Run("HistoricData", testHistoricDataExists)
	t.Run("PosData", testPosDataExists)
	t.Run("PowData", testPowDataExists)
}

func TestFind(t *testing.T) {
	t.Run("ChartData", testChartDataFind)
	t.Run("HistoricData", testHistoricDataFind)
	t.Run("PosData", testPosDataFind)
	t.Run("PowData", testPowDataFind)
}

func TestBind(t *testing.T) {
	t.Run("ChartData", testChartDataBind)
	t.Run("HistoricData", testHistoricDataBind)
	t.Run("PosData", testPosDataBind)
	t.Run("PowData", testPowDataBind)
}

func TestOne(t *testing.T) {
	t.Run("ChartData", testChartDataOne)
	t.Run("HistoricData", testHistoricDataOne)
	t.Run("PosData", testPosDataOne)
	t.Run("PowData", testPowDataOne)
}

func TestAll(t *testing.T) {
	t.Run("ChartData", testChartDataAll)
	t.Run("HistoricData", testHistoricDataAll)
	t.Run("PosData", testPosDataAll)
	t.Run("PowData", testPowDataAll)
}

func TestCount(t *testing.T) {
	t.Run("ChartData", testChartDataCount)
	t.Run("HistoricData", testHistoricDataCount)
	t.Run("PosData", testPosDataCount)
	t.Run("PowData", testPowDataCount)
}

func TestHooks(t *testing.T) {
	t.Run("ChartData", testChartDataHooks)
	t.Run("HistoricData", testHistoricDataHooks)
	t.Run("PosData", testPosDataHooks)
	t.Run("PowData", testPowDataHooks)
}

func TestInsert(t *testing.T) {
	t.Run("ChartData", testChartDataInsert)
	t.Run("ChartData", testChartDataInsertWhitelist)
	t.Run("HistoricData", testHistoricDataInsert)
	t.Run("HistoricData", testHistoricDataInsertWhitelist)
	t.Run("PosData", testPosDataInsert)
	t.Run("PosData", testPosDataInsertWhitelist)
	t.Run("PowData", testPowDataInsert)
	t.Run("PowData", testPowDataInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("ChartData", testChartDataReload)
	t.Run("HistoricData", testHistoricDataReload)
	t.Run("PosData", testPosDataReload)
	t.Run("PowData", testPowDataReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("ChartData", testChartDataReloadAll)
	t.Run("HistoricData", testHistoricDataReloadAll)
	t.Run("PosData", testPosDataReloadAll)
	t.Run("PowData", testPowDataReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("ChartData", testChartDataSelect)
	t.Run("HistoricData", testHistoricDataSelect)
	t.Run("PosData", testPosDataSelect)
	t.Run("PowData", testPowDataSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("ChartData", testChartDataUpdate)
	t.Run("HistoricData", testHistoricDataUpdate)
	t.Run("PosData", testPosDataUpdate)
	t.Run("PowData", testPowDataUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("ChartData", testChartDataSliceUpdateAll)
	t.Run("HistoricData", testHistoricDataSliceUpdateAll)
	t.Run("PosData", testPosDataSliceUpdateAll)
	t.Run("PowData", testPowDataSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("ChartData", testChartDataUpsert)
	t.Run("HistoricData", testHistoricDataUpsert)
	t.Run("PosData", testPosDataUpsert)
	t.Run("PowData", testPowDataUpsert)
}
