// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testPowData(t *testing.T) {
	t.Parallel()

	query := PowData(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPowDataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powDatum := &PowDatum{}
	if err = randomize.Struct(seed, powDatum, powDatumDBTypes, true, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = powDatum.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := PowData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPowDataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powDatum := &PowDatum{}
	if err = randomize.Struct(seed, powDatum, powDatumDBTypes, true, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = PowData(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := PowData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPowDataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powDatum := &PowDatum{}
	if err = randomize.Struct(seed, powDatum, powDatumDBTypes, true, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PowDatumSlice{powDatum}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := PowData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPowDataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powDatum := &PowDatum{}
	if err = randomize.Struct(seed, powDatum, powDatumDBTypes, true, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PowDatumExists(tx, powDatum.ID)
	if err != nil {
		t.Errorf("Unable to check if PowDatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PowDatumExistsG to return true, but got false.")
	}
}
func testPowDataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powDatum := &PowDatum{}
	if err = randomize.Struct(seed, powDatum, powDatumDBTypes, true, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	powDatumFound, err := FindPowDatum(tx, powDatum.ID)
	if err != nil {
		t.Error(err)
	}

	if powDatumFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPowDataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powDatum := &PowDatum{}
	if err = randomize.Struct(seed, powDatum, powDatumDBTypes, true, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = PowData(tx).Bind(powDatum); err != nil {
		t.Error(err)
	}
}

func testPowDataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powDatum := &PowDatum{}
	if err = randomize.Struct(seed, powDatum, powDatumDBTypes, true, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := PowData(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPowDataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powDatumOne := &PowDatum{}
	powDatumTwo := &PowDatum{}
	if err = randomize.Struct(seed, powDatumOne, powDatumDBTypes, false, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, powDatumTwo, powDatumDBTypes, false, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatumOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = powDatumTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := PowData(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPowDataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	powDatumOne := &PowDatum{}
	powDatumTwo := &PowDatum{}
	if err = randomize.Struct(seed, powDatumOne, powDatumDBTypes, false, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, powDatumTwo, powDatumDBTypes, false, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatumOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = powDatumTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PowData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func powDatumBeforeInsertHook(e boil.Executor, o *PowDatum) error {
	*o = PowDatum{}
	return nil
}

func powDatumAfterInsertHook(e boil.Executor, o *PowDatum) error {
	*o = PowDatum{}
	return nil
}

func powDatumAfterSelectHook(e boil.Executor, o *PowDatum) error {
	*o = PowDatum{}
	return nil
}

func powDatumBeforeUpdateHook(e boil.Executor, o *PowDatum) error {
	*o = PowDatum{}
	return nil
}

func powDatumAfterUpdateHook(e boil.Executor, o *PowDatum) error {
	*o = PowDatum{}
	return nil
}

func powDatumBeforeDeleteHook(e boil.Executor, o *PowDatum) error {
	*o = PowDatum{}
	return nil
}

func powDatumAfterDeleteHook(e boil.Executor, o *PowDatum) error {
	*o = PowDatum{}
	return nil
}

func powDatumBeforeUpsertHook(e boil.Executor, o *PowDatum) error {
	*o = PowDatum{}
	return nil
}

func powDatumAfterUpsertHook(e boil.Executor, o *PowDatum) error {
	*o = PowDatum{}
	return nil
}

func testPowDataHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &PowDatum{}
	o := &PowDatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, powDatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PowDatum object: %s", err)
	}

	AddPowDatumHook(boil.BeforeInsertHook, powDatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	powDatumBeforeInsertHooks = []PowDatumHook{}

	AddPowDatumHook(boil.AfterInsertHook, powDatumAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	powDatumAfterInsertHooks = []PowDatumHook{}

	AddPowDatumHook(boil.AfterSelectHook, powDatumAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	powDatumAfterSelectHooks = []PowDatumHook{}

	AddPowDatumHook(boil.BeforeUpdateHook, powDatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	powDatumBeforeUpdateHooks = []PowDatumHook{}

	AddPowDatumHook(boil.AfterUpdateHook, powDatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	powDatumAfterUpdateHooks = []PowDatumHook{}

	AddPowDatumHook(boil.BeforeDeleteHook, powDatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	powDatumBeforeDeleteHooks = []PowDatumHook{}

	AddPowDatumHook(boil.AfterDeleteHook, powDatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	powDatumAfterDeleteHooks = []PowDatumHook{}

	AddPowDatumHook(boil.BeforeUpsertHook, powDatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	powDatumBeforeUpsertHooks = []PowDatumHook{}

	AddPowDatumHook(boil.AfterUpsertHook, powDatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	powDatumAfterUpsertHooks = []PowDatumHook{}
}
func testPowDataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powDatum := &PowDatum{}
	if err = randomize.Struct(seed, powDatum, powDatumDBTypes, true, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PowData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPowDataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powDatum := &PowDatum{}
	if err = randomize.Struct(seed, powDatum, powDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatum.Insert(tx, powDatumColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := PowData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPowDataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powDatum := &PowDatum{}
	if err = randomize.Struct(seed, powDatum, powDatumDBTypes, true, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = powDatum.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPowDataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powDatum := &PowDatum{}
	if err = randomize.Struct(seed, powDatum, powDatumDBTypes, true, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PowDatumSlice{powDatum}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPowDataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powDatum := &PowDatum{}
	if err = randomize.Struct(seed, powDatum, powDatumDBTypes, true, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := PowData(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	powDatumDBTypes = map[string]string{`Actual124h`: `numeric`, `BTC24H`: `numeric`, `Blocks24h`: `numeric`, `Blocksfound`: `numeric`, `Blocksper`: `numeric`, `Btcprice`: `numeric`, `Coinprice`: `numeric`, `Currentheight`: `numeric`, `Currentnetworkblock`: `numeric`, `Date`: `numeric`, `Dev`: `numeric`, `Efficiency`: `numeric`, `Est`: `numeric`, `Estimatecurrent`: `numeric`, `Estimatelast24h`: `numeric`, `Estshare`: `numeric`, `Esttime`: `numeric`, `Fees`: `numeric`, `Hashrate`: `numeric`, `Hashratelast24h`: `numeric`, `Height`: `numeric`, `ID`: `integer`, `Lastblock`: `numeric`, `Lastupdate`: `numeric`, `Luck`: `numeric`, `Mbtcmhfactor`: `numeric`, `Name`: `character varying`, `Nethashrate`: `numeric`, `Networkdiff`: `numeric`, `Networkdifficulty`: `numeric`, `Nextnetworkblock`: `numeric`, `Port`: `numeric`, `Pos`: `numeric`, `Pow`: `numeric`, `Powid`: `numeric`, `Ppshare`: `numeric`, `Progress`: `numeric`, `Rentalcurrent`: `numeric`, `Success`: `character varying`, `Time`: `numeric`, `Timesincelast`: `numeric`, `Total`: `numeric`, `Totalkickback`: `numeric`, `Totalminers`: `numeric`, `Workers`: `numeric`}
	_               = bytes.MinRead
)

func testPowDataUpdate(t *testing.T) {
	t.Parallel()

	if len(powDatumColumns) == len(powDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	powDatum := &PowDatum{}
	if err = randomize.Struct(seed, powDatum, powDatumDBTypes, true, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PowData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, powDatum, powDatumDBTypes, true, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	if err = powDatum.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPowDataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(powDatumColumns) == len(powDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	powDatum := &PowDatum{}
	if err = randomize.Struct(seed, powDatum, powDatumDBTypes, true, powDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PowData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, powDatum, powDatumDBTypes, true, powDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(powDatumColumns, powDatumPrimaryKeyColumns) {
		fields = powDatumColumns
	} else {
		fields = strmangle.SetComplement(
			powDatumColumns,
			powDatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(powDatum))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PowDatumSlice{powDatum}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPowDataUpsert(t *testing.T) {
	t.Parallel()

	if len(powDatumColumns) == len(powDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	powDatum := PowDatum{}
	if err = randomize.Struct(seed, &powDatum, powDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powDatum.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert PowDatum: %s", err)
	}

	count, err := PowData(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &powDatum, powDatumDBTypes, false, powDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PowDatum struct: %s", err)
	}

	if err = powDatum.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert PowDatum: %s", err)
	}

	count, err = PowData(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
