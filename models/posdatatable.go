// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Posdatatable is an object representing the database table.
type Posdatatable struct {
	ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Posid                null.Int    `boil:"posid" json:"posid,omitempty" toml:"posid" yaml:"posid,omitempty"`
	Apienabled           null.String `boil:"apienabled" json:"apienabled,omitempty" toml:"apienabled" yaml:"apienabled,omitempty"`
	Apiversionssupported null.String `boil:"apiversionssupported" json:"apiversionssupported,omitempty" toml:"apiversionssupported" yaml:"apiversionssupported,omitempty"`
	Network              null.String `boil:"network" json:"network,omitempty" toml:"network" yaml:"network,omitempty"`
	URL                  null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	Launched             null.String `boil:"launched" json:"launched,omitempty" toml:"launched" yaml:"launched,omitempty"`
	Lastupdated          null.String `boil:"lastupdated" json:"lastupdated,omitempty" toml:"lastupdated" yaml:"lastupdated,omitempty"`
	Immature             null.String `boil:"immature" json:"immature,omitempty" toml:"immature" yaml:"immature,omitempty"`
	Live                 null.String `boil:"live" json:"live,omitempty" toml:"live" yaml:"live,omitempty"`
	Voted                null.String `boil:"voted" json:"voted,omitempty" toml:"voted" yaml:"voted,omitempty"`
	Missed               null.String `boil:"missed" json:"missed,omitempty" toml:"missed" yaml:"missed,omitempty"`
	Poolfees             null.String `boil:"poolfees" json:"poolfees,omitempty" toml:"poolfees" yaml:"poolfees,omitempty"`
	Proportionlive       null.String `boil:"proportionlive" json:"proportionlive,omitempty" toml:"proportionlive" yaml:"proportionlive,omitempty"`
	Proportionmissed     null.String `boil:"proportionmissed" json:"proportionmissed,omitempty" toml:"proportionmissed" yaml:"proportionmissed,omitempty"`
	Usercount            null.String `boil:"usercount" json:"usercount,omitempty" toml:"usercount" yaml:"usercount,omitempty"`
	Usercountactive      null.String `boil:"usercountactive" json:"usercountactive,omitempty" toml:"usercountactive" yaml:"usercountactive,omitempty"`
	Timestamp            null.String `boil:"timestamp" json:"timestamp,omitempty" toml:"timestamp" yaml:"timestamp,omitempty"`

	R *posdatatableR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L posdatatableL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PosdatatableColumns = struct {
	ID                   string
	Posid                string
	Apienabled           string
	Apiversionssupported string
	Network              string
	URL                  string
	Launched             string
	Lastupdated          string
	Immature             string
	Live                 string
	Voted                string
	Missed               string
	Poolfees             string
	Proportionlive       string
	Proportionmissed     string
	Usercount            string
	Usercountactive      string
	Timestamp            string
}{
	ID:                   "id",
	Posid:                "posid",
	Apienabled:           "apienabled",
	Apiversionssupported: "apiversionssupported",
	Network:              "network",
	URL:                  "url",
	Launched:             "launched",
	Lastupdated:          "lastupdated",
	Immature:             "immature",
	Live:                 "live",
	Voted:                "voted",
	Missed:               "missed",
	Poolfees:             "poolfees",
	Proportionlive:       "proportionlive",
	Proportionmissed:     "proportionmissed",
	Usercount:            "usercount",
	Usercountactive:      "usercountactive",
	Timestamp:            "timestamp",
}

// posdatatableR is where relationships are stored.
type posdatatableR struct {
}

// posdatatableL is where Load methods for each relationship are stored.
type posdatatableL struct{}

var (
	posdatatableColumns               = []string{"id", "posid", "apienabled", "apiversionssupported", "network", "url", "launched", "lastupdated", "immature", "live", "voted", "missed", "poolfees", "proportionlive", "proportionmissed", "usercount", "usercountactive", "timestamp"}
	posdatatableColumnsWithoutDefault = []string{"posid", "apienabled", "apiversionssupported", "network", "url", "launched", "lastupdated", "immature", "live", "voted", "missed", "poolfees", "proportionlive", "proportionmissed", "usercount", "usercountactive", "timestamp"}
	posdatatableColumnsWithDefault    = []string{"id"}
	posdatatablePrimaryKeyColumns     = []string{"id"}
)

type (
	// PosdatatableSlice is an alias for a slice of pointers to Posdatatable.
	// This should generally be used opposed to []Posdatatable.
	PosdatatableSlice []*Posdatatable
	// PosdatatableHook is the signature for custom Posdatatable hook methods
	PosdatatableHook func(boil.Executor, *Posdatatable) error

	posdatatableQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	posdatatableType                 = reflect.TypeOf(&Posdatatable{})
	posdatatableMapping              = queries.MakeStructMapping(posdatatableType)
	posdatatablePrimaryKeyMapping, _ = queries.BindMapping(posdatatableType, posdatatableMapping, posdatatablePrimaryKeyColumns)
	posdatatableInsertCacheMut       sync.RWMutex
	posdatatableInsertCache          = make(map[string]insertCache)
	posdatatableUpdateCacheMut       sync.RWMutex
	posdatatableUpdateCache          = make(map[string]updateCache)
	posdatatableUpsertCacheMut       sync.RWMutex
	posdatatableUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var posdatatableBeforeInsertHooks []PosdatatableHook
var posdatatableBeforeUpdateHooks []PosdatatableHook
var posdatatableBeforeDeleteHooks []PosdatatableHook
var posdatatableBeforeUpsertHooks []PosdatatableHook

var posdatatableAfterInsertHooks []PosdatatableHook
var posdatatableAfterSelectHooks []PosdatatableHook
var posdatatableAfterUpdateHooks []PosdatatableHook
var posdatatableAfterDeleteHooks []PosdatatableHook
var posdatatableAfterUpsertHooks []PosdatatableHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Posdatatable) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatatableBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Posdatatable) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatatableBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Posdatatable) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatatableBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Posdatatable) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatatableBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Posdatatable) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatatableAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Posdatatable) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatatableAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Posdatatable) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatatableAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Posdatatable) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatatableAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Posdatatable) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range posdatatableAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPosdatatableHook registers your hook function for all future operations.
func AddPosdatatableHook(hookPoint boil.HookPoint, posdatatableHook PosdatatableHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		posdatatableBeforeInsertHooks = append(posdatatableBeforeInsertHooks, posdatatableHook)
	case boil.BeforeUpdateHook:
		posdatatableBeforeUpdateHooks = append(posdatatableBeforeUpdateHooks, posdatatableHook)
	case boil.BeforeDeleteHook:
		posdatatableBeforeDeleteHooks = append(posdatatableBeforeDeleteHooks, posdatatableHook)
	case boil.BeforeUpsertHook:
		posdatatableBeforeUpsertHooks = append(posdatatableBeforeUpsertHooks, posdatatableHook)
	case boil.AfterInsertHook:
		posdatatableAfterInsertHooks = append(posdatatableAfterInsertHooks, posdatatableHook)
	case boil.AfterSelectHook:
		posdatatableAfterSelectHooks = append(posdatatableAfterSelectHooks, posdatatableHook)
	case boil.AfterUpdateHook:
		posdatatableAfterUpdateHooks = append(posdatatableAfterUpdateHooks, posdatatableHook)
	case boil.AfterDeleteHook:
		posdatatableAfterDeleteHooks = append(posdatatableAfterDeleteHooks, posdatatableHook)
	case boil.AfterUpsertHook:
		posdatatableAfterUpsertHooks = append(posdatatableAfterUpsertHooks, posdatatableHook)
	}
}

// OneP returns a single posdatatable record from the query, and panics on error.
func (q posdatatableQuery) OneP() *Posdatatable {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single posdatatable record from the query.
func (q posdatatableQuery) One() (*Posdatatable, error) {
	o := &Posdatatable{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for posdatatable")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Posdatatable records from the query, and panics on error.
func (q posdatatableQuery) AllP() PosdatatableSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Posdatatable records from the query.
func (q posdatatableQuery) All() (PosdatatableSlice, error) {
	var o []*Posdatatable

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Posdatatable slice")
	}

	if len(posdatatableAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Posdatatable records in the query, and panics on error.
func (q posdatatableQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Posdatatable records in the query.
func (q posdatatableQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count posdatatable rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q posdatatableQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q posdatatableQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if posdatatable exists")
	}

	return count > 0, nil
}

// PosdatatablesG retrieves all records.
func PosdatatablesG(mods ...qm.QueryMod) posdatatableQuery {
	return Posdatatables(boil.GetDB(), mods...)
}

// Posdatatables retrieves all the records using an executor.
func Posdatatables(exec boil.Executor, mods ...qm.QueryMod) posdatatableQuery {
	mods = append(mods, qm.From("\"posdatatable\""))
	return posdatatableQuery{NewQuery(exec, mods...)}
}

// FindPosdatatableG retrieves a single record by ID.
func FindPosdatatableG(id int, selectCols ...string) (*Posdatatable, error) {
	return FindPosdatatable(boil.GetDB(), id, selectCols...)
}

// FindPosdatatableGP retrieves a single record by ID, and panics on error.
func FindPosdatatableGP(id int, selectCols ...string) *Posdatatable {
	retobj, err := FindPosdatatable(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPosdatatable retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPosdatatable(exec boil.Executor, id int, selectCols ...string) (*Posdatatable, error) {
	posdatatableObj := &Posdatatable{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"posdatatable\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(posdatatableObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from posdatatable")
	}

	return posdatatableObj, nil
}

// FindPosdatatableP retrieves a single record by ID with an executor, and panics on error.
func FindPosdatatableP(exec boil.Executor, id int, selectCols ...string) *Posdatatable {
	retobj, err := FindPosdatatable(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Posdatatable) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Posdatatable) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Posdatatable) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Posdatatable) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no posdatatable provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(posdatatableColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	posdatatableInsertCacheMut.RLock()
	cache, cached := posdatatableInsertCache[key]
	posdatatableInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			posdatatableColumns,
			posdatatableColumnsWithDefault,
			posdatatableColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(posdatatableType, posdatatableMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(posdatatableType, posdatatableMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"posdatatable\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"posdatatable\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into posdatatable")
	}

	if !cached {
		posdatatableInsertCacheMut.Lock()
		posdatatableInsertCache[key] = cache
		posdatatableInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Posdatatable record. See Update for
// whitelist behavior description.
func (o *Posdatatable) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Posdatatable record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Posdatatable) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Posdatatable, and panics on error.
// See Update for whitelist behavior description.
func (o *Posdatatable) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Posdatatable.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Posdatatable) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	posdatatableUpdateCacheMut.RLock()
	cache, cached := posdatatableUpdateCache[key]
	posdatatableUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			posdatatableColumns,
			posdatatablePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update posdatatable, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"posdatatable\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, posdatatablePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(posdatatableType, posdatatableMapping, append(wl, posdatatablePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update posdatatable row")
	}

	if !cached {
		posdatatableUpdateCacheMut.Lock()
		posdatatableUpdateCache[key] = cache
		posdatatableUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q posdatatableQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q posdatatableQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for posdatatable")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PosdatatableSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PosdatatableSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PosdatatableSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PosdatatableSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), posdatatablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"posdatatable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, posdatatablePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in posdatatable slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Posdatatable) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Posdatatable) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Posdatatable) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Posdatatable) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no posdatatable provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(posdatatableColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	posdatatableUpsertCacheMut.RLock()
	cache, cached := posdatatableUpsertCache[key]
	posdatatableUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			posdatatableColumns,
			posdatatableColumnsWithDefault,
			posdatatableColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			posdatatableColumns,
			posdatatablePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert posdatatable, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(posdatatablePrimaryKeyColumns))
			copy(conflict, posdatatablePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"posdatatable\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(posdatatableType, posdatatableMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(posdatatableType, posdatatableMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert posdatatable")
	}

	if !cached {
		posdatatableUpsertCacheMut.Lock()
		posdatatableUpsertCache[key] = cache
		posdatatableUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Posdatatable record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Posdatatable) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Posdatatable record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Posdatatable) DeleteG() error {
	if o == nil {
		return errors.New("models: no Posdatatable provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Posdatatable record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Posdatatable) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Posdatatable record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Posdatatable) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Posdatatable provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), posdatatablePrimaryKeyMapping)
	sql := "DELETE FROM \"posdatatable\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from posdatatable")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q posdatatableQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q posdatatableQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no posdatatableQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from posdatatable")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PosdatatableSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PosdatatableSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Posdatatable slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PosdatatableSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PosdatatableSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Posdatatable slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(posdatatableBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), posdatatablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"posdatatable\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, posdatatablePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from posdatatable slice")
	}

	if len(posdatatableAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Posdatatable) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Posdatatable) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Posdatatable) ReloadG() error {
	if o == nil {
		return errors.New("models: no Posdatatable provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Posdatatable) Reload(exec boil.Executor) error {
	ret, err := FindPosdatatable(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PosdatatableSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PosdatatableSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PosdatatableSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty PosdatatableSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PosdatatableSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	posdatatables := PosdatatableSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), posdatatablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"posdatatable\".* FROM \"posdatatable\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, posdatatablePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&posdatatables)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PosdatatableSlice")
	}

	*o = posdatatables

	return nil
}

// PosdatatableExists checks if the Posdatatable row exists.
func PosdatatableExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"posdatatable\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if posdatatable exists")
	}

	return exists, nil
}

// PosdatatableExistsG checks if the Posdatatable row exists.
func PosdatatableExistsG(id int) (bool, error) {
	return PosdatatableExists(boil.GetDB(), id)
}

// PosdatatableExistsGP checks if the Posdatatable row exists. Panics on error.
func PosdatatableExistsGP(id int) bool {
	e, err := PosdatatableExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PosdatatableExistsP checks if the Posdatatable row exists. Panics on error.
func PosdatatableExistsP(exec boil.Executor, id int) bool {
	e, err := PosdatatableExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
