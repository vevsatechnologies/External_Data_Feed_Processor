// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testChartData(t *testing.T) {
	t.Parallel()

	query := ChartData(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testChartDataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chartDatum := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatum, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = chartDatum.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := ChartData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChartDataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chartDatum := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatum, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ChartData(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := ChartData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChartDataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chartDatum := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatum, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ChartDatumSlice{chartDatum}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := ChartData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testChartDataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chartDatum := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatum, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ChartDatumExists(tx, chartDatum.ID)
	if err != nil {
		t.Errorf("Unable to check if ChartDatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ChartDatumExistsG to return true, but got false.")
	}
}
func testChartDataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chartDatum := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatum, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	chartDatumFound, err := FindChartDatum(tx, chartDatum.ID)
	if err != nil {
		t.Error(err)
	}

	if chartDatumFound == nil {
		t.Error("want a record, got nil")
	}
}
func testChartDataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chartDatum := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatum, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ChartData(tx).Bind(chartDatum); err != nil {
		t.Error(err)
	}
}

func testChartDataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chartDatum := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatum, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := ChartData(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testChartDataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chartDatumOne := &ChartDatum{}
	chartDatumTwo := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatumOne, chartDatumDBTypes, false, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, chartDatumTwo, chartDatumDBTypes, false, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatumOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = chartDatumTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := ChartData(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testChartDataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	chartDatumOne := &ChartDatum{}
	chartDatumTwo := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatumOne, chartDatumDBTypes, false, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, chartDatumTwo, chartDatumDBTypes, false, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatumOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = chartDatumTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ChartData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func chartDatumBeforeInsertHook(e boil.Executor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func chartDatumAfterInsertHook(e boil.Executor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func chartDatumAfterSelectHook(e boil.Executor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func chartDatumBeforeUpdateHook(e boil.Executor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func chartDatumAfterUpdateHook(e boil.Executor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func chartDatumBeforeDeleteHook(e boil.Executor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func chartDatumAfterDeleteHook(e boil.Executor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func chartDatumBeforeUpsertHook(e boil.Executor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func chartDatumAfterUpsertHook(e boil.Executor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func testChartDataHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &ChartDatum{}
	o := &ChartDatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, chartDatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ChartDatum object: %s", err)
	}

	AddChartDatumHook(boil.BeforeInsertHook, chartDatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	chartDatumBeforeInsertHooks = []ChartDatumHook{}

	AddChartDatumHook(boil.AfterInsertHook, chartDatumAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	chartDatumAfterInsertHooks = []ChartDatumHook{}

	AddChartDatumHook(boil.AfterSelectHook, chartDatumAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	chartDatumAfterSelectHooks = []ChartDatumHook{}

	AddChartDatumHook(boil.BeforeUpdateHook, chartDatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	chartDatumBeforeUpdateHooks = []ChartDatumHook{}

	AddChartDatumHook(boil.AfterUpdateHook, chartDatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	chartDatumAfterUpdateHooks = []ChartDatumHook{}

	AddChartDatumHook(boil.BeforeDeleteHook, chartDatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	chartDatumBeforeDeleteHooks = []ChartDatumHook{}

	AddChartDatumHook(boil.AfterDeleteHook, chartDatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	chartDatumAfterDeleteHooks = []ChartDatumHook{}

	AddChartDatumHook(boil.BeforeUpsertHook, chartDatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	chartDatumBeforeUpsertHooks = []ChartDatumHook{}

	AddChartDatumHook(boil.AfterUpsertHook, chartDatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	chartDatumAfterUpsertHooks = []ChartDatumHook{}
}
func testChartDataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chartDatum := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatum, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ChartData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChartDataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chartDatum := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatum, chartDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatum.Insert(tx, chartDatumColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := ChartData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChartDataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chartDatum := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatum, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = chartDatum.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testChartDataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chartDatum := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatum, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ChartDatumSlice{chartDatum}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testChartDataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chartDatum := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatum, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := ChartData(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	chartDatumDBTypes = map[string]string{`Close`: `character varying`, `Date`: `timestamp without time zone`, `Exchangeid`: `integer`, `High`: `character varying`, `ID`: `integer`, `Low`: `character varying`, `Open`: `character varying`, `Quotevolume`: `character varying`, `Volume`: `character varying`, `Weightedaverage`: `character varying`}
	_                 = bytes.MinRead
)

func testChartDataUpdate(t *testing.T) {
	t.Parallel()

	if len(chartDatumColumns) == len(chartDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	chartDatum := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatum, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ChartData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, chartDatum, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	if err = chartDatum.Update(tx); err != nil {
		t.Error(err)
	}
}

func testChartDataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(chartDatumColumns) == len(chartDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	chartDatum := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatum, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ChartData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, chartDatum, chartDatumDBTypes, true, chartDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(chartDatumColumns, chartDatumPrimaryKeyColumns) {
		fields = chartDatumColumns
	} else {
		fields = strmangle.SetComplement(
			chartDatumColumns,
			chartDatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(chartDatum))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ChartDatumSlice{chartDatum}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testChartDataUpsert(t *testing.T) {
	t.Parallel()

	if len(chartDatumColumns) == len(chartDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	chartDatum := ChartDatum{}
	if err = randomize.Struct(seed, &chartDatum, chartDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartDatum.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert ChartDatum: %s", err)
	}

	count, err := ChartData(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &chartDatum, chartDatumDBTypes, false, chartDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	if err = chartDatum.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert ChartDatum: %s", err)
	}

	count, err = ChartData(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
