// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testPosData(t *testing.T) {
	t.Parallel()

	query := PosData(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPosDataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posDatum := &PosDatum{}
	if err = randomize.Struct(seed, posDatum, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = posDatum.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := PosData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPosDataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posDatum := &PosDatum{}
	if err = randomize.Struct(seed, posDatum, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = PosData(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := PosData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPosDataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posDatum := &PosDatum{}
	if err = randomize.Struct(seed, posDatum, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PosDatumSlice{posDatum}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := PosData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPosDataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posDatum := &PosDatum{}
	if err = randomize.Struct(seed, posDatum, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PosDatumExists(tx, posDatum.ID)
	if err != nil {
		t.Errorf("Unable to check if PosDatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PosDatumExistsG to return true, but got false.")
	}
}
func testPosDataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posDatum := &PosDatum{}
	if err = randomize.Struct(seed, posDatum, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	posDatumFound, err := FindPosDatum(tx, posDatum.ID)
	if err != nil {
		t.Error(err)
	}

	if posDatumFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPosDataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posDatum := &PosDatum{}
	if err = randomize.Struct(seed, posDatum, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = PosData(tx).Bind(posDatum); err != nil {
		t.Error(err)
	}
}

func testPosDataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posDatum := &PosDatum{}
	if err = randomize.Struct(seed, posDatum, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := PosData(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPosDataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posDatumOne := &PosDatum{}
	posDatumTwo := &PosDatum{}
	if err = randomize.Struct(seed, posDatumOne, posDatumDBTypes, false, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, posDatumTwo, posDatumDBTypes, false, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatumOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = posDatumTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := PosData(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPosDataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	posDatumOne := &PosDatum{}
	posDatumTwo := &PosDatum{}
	if err = randomize.Struct(seed, posDatumOne, posDatumDBTypes, false, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, posDatumTwo, posDatumDBTypes, false, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatumOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = posDatumTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PosData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func posDatumBeforeInsertHook(e boil.Executor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func posDatumAfterInsertHook(e boil.Executor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func posDatumAfterSelectHook(e boil.Executor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func posDatumBeforeUpdateHook(e boil.Executor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func posDatumAfterUpdateHook(e boil.Executor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func posDatumBeforeDeleteHook(e boil.Executor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func posDatumAfterDeleteHook(e boil.Executor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func posDatumBeforeUpsertHook(e boil.Executor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func posDatumAfterUpsertHook(e boil.Executor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func testPosDataHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &PosDatum{}
	o := &PosDatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, posDatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PosDatum object: %s", err)
	}

	AddPosDatumHook(boil.BeforeInsertHook, posDatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	posDatumBeforeInsertHooks = []PosDatumHook{}

	AddPosDatumHook(boil.AfterInsertHook, posDatumAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	posDatumAfterInsertHooks = []PosDatumHook{}

	AddPosDatumHook(boil.AfterSelectHook, posDatumAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	posDatumAfterSelectHooks = []PosDatumHook{}

	AddPosDatumHook(boil.BeforeUpdateHook, posDatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	posDatumBeforeUpdateHooks = []PosDatumHook{}

	AddPosDatumHook(boil.AfterUpdateHook, posDatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	posDatumAfterUpdateHooks = []PosDatumHook{}

	AddPosDatumHook(boil.BeforeDeleteHook, posDatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	posDatumBeforeDeleteHooks = []PosDatumHook{}

	AddPosDatumHook(boil.AfterDeleteHook, posDatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	posDatumAfterDeleteHooks = []PosDatumHook{}

	AddPosDatumHook(boil.BeforeUpsertHook, posDatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	posDatumBeforeUpsertHooks = []PosDatumHook{}

	AddPosDatumHook(boil.AfterUpsertHook, posDatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	posDatumAfterUpsertHooks = []PosDatumHook{}
}
func testPosDataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posDatum := &PosDatum{}
	if err = randomize.Struct(seed, posDatum, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PosData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPosDataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posDatum := &PosDatum{}
	if err = randomize.Struct(seed, posDatum, posDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatum.Insert(tx, posDatumColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := PosData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPosDataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posDatum := &PosDatum{}
	if err = randomize.Struct(seed, posDatum, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = posDatum.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPosDataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posDatum := &PosDatum{}
	if err = randomize.Struct(seed, posDatum, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PosDatumSlice{posDatum}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPosDataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posDatum := &PosDatum{}
	if err = randomize.Struct(seed, posDatum, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := PosData(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	posDatumDBTypes = map[string]string{`Apienabled`: `character varying`, `Apiversionssupported`: `numeric`, `ID`: `integer`, `Immature`: `character varying`, `Lastupdated`: `character varying`, `Launched`: `character varying`, `Live`: `character varying`, `Missed`: `numeric`, `Network`: `character varying`, `Poolfees`: `numeric`, `Posid`: `character varying`, `Proportionlive`: `numeric`, `Proportionmissed`: `numeric`, `Timestamp`: `time without time zone`, `URL`: `character varying`, `Usercount`: `numeric`, `Usercountactive`: `numeric`, `Voted`: `numeric`}
	_               = bytes.MinRead
)

func testPosDataUpdate(t *testing.T) {
	t.Parallel()

	if len(posDatumColumns) == len(posDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	posDatum := &PosDatum{}
	if err = randomize.Struct(seed, posDatum, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PosData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, posDatum, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	if err = posDatum.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPosDataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(posDatumColumns) == len(posDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	posDatum := &PosDatum{}
	if err = randomize.Struct(seed, posDatum, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PosData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, posDatum, posDatumDBTypes, true, posDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(posDatumColumns, posDatumPrimaryKeyColumns) {
		fields = posDatumColumns
	} else {
		fields = strmangle.SetComplement(
			posDatumColumns,
			posDatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(posDatum))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PosDatumSlice{posDatum}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPosDataUpsert(t *testing.T) {
	t.Parallel()

	if len(posDatumColumns) == len(posDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	posDatum := PosDatum{}
	if err = randomize.Struct(seed, &posDatum, posDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = posDatum.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert PosDatum: %s", err)
	}

	count, err := PosData(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &posDatum, posDatumDBTypes, false, posDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	if err = posDatum.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert PosDatum: %s", err)
	}

	count, err = PosData(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
