// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testPoloniexHistoricData(t *testing.T) {
	t.Parallel()

	query := PoloniexHistoricData(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPoloniexHistoricDataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	poloniexHistoricDatum := &PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = poloniexHistoricDatum.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := PoloniexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPoloniexHistoricDataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	poloniexHistoricDatum := &PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = PoloniexHistoricData(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := PoloniexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPoloniexHistoricDataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	poloniexHistoricDatum := &PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PoloniexHistoricDatumSlice{poloniexHistoricDatum}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := PoloniexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPoloniexHistoricDataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	poloniexHistoricDatum := &PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PoloniexHistoricDatumExists(tx, poloniexHistoricDatum.ID)
	if err != nil {
		t.Errorf("Unable to check if PoloniexHistoricDatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PoloniexHistoricDatumExistsG to return true, but got false.")
	}
}
func testPoloniexHistoricDataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	poloniexHistoricDatum := &PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	poloniexHistoricDatumFound, err := FindPoloniexHistoricDatum(tx, poloniexHistoricDatum.ID)
	if err != nil {
		t.Error(err)
	}

	if poloniexHistoricDatumFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPoloniexHistoricDataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	poloniexHistoricDatum := &PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = PoloniexHistoricData(tx).Bind(poloniexHistoricDatum); err != nil {
		t.Error(err)
	}
}

func testPoloniexHistoricDataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	poloniexHistoricDatum := &PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := PoloniexHistoricData(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPoloniexHistoricDataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	poloniexHistoricDatumOne := &PoloniexHistoricDatum{}
	poloniexHistoricDatumTwo := &PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, poloniexHistoricDatumOne, poloniexHistoricDatumDBTypes, false, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, poloniexHistoricDatumTwo, poloniexHistoricDatumDBTypes, false, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatumOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = poloniexHistoricDatumTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := PoloniexHistoricData(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPoloniexHistoricDataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	poloniexHistoricDatumOne := &PoloniexHistoricDatum{}
	poloniexHistoricDatumTwo := &PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, poloniexHistoricDatumOne, poloniexHistoricDatumDBTypes, false, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, poloniexHistoricDatumTwo, poloniexHistoricDatumDBTypes, false, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatumOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = poloniexHistoricDatumTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PoloniexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func poloniexHistoricDatumBeforeInsertHook(e boil.Executor, o *PoloniexHistoricDatum) error {
	*o = PoloniexHistoricDatum{}
	return nil
}

func poloniexHistoricDatumAfterInsertHook(e boil.Executor, o *PoloniexHistoricDatum) error {
	*o = PoloniexHistoricDatum{}
	return nil
}

func poloniexHistoricDatumAfterSelectHook(e boil.Executor, o *PoloniexHistoricDatum) error {
	*o = PoloniexHistoricDatum{}
	return nil
}

func poloniexHistoricDatumBeforeUpdateHook(e boil.Executor, o *PoloniexHistoricDatum) error {
	*o = PoloniexHistoricDatum{}
	return nil
}

func poloniexHistoricDatumAfterUpdateHook(e boil.Executor, o *PoloniexHistoricDatum) error {
	*o = PoloniexHistoricDatum{}
	return nil
}

func poloniexHistoricDatumBeforeDeleteHook(e boil.Executor, o *PoloniexHistoricDatum) error {
	*o = PoloniexHistoricDatum{}
	return nil
}

func poloniexHistoricDatumAfterDeleteHook(e boil.Executor, o *PoloniexHistoricDatum) error {
	*o = PoloniexHistoricDatum{}
	return nil
}

func poloniexHistoricDatumBeforeUpsertHook(e boil.Executor, o *PoloniexHistoricDatum) error {
	*o = PoloniexHistoricDatum{}
	return nil
}

func poloniexHistoricDatumAfterUpsertHook(e boil.Executor, o *PoloniexHistoricDatum) error {
	*o = PoloniexHistoricDatum{}
	return nil
}

func testPoloniexHistoricDataHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &PoloniexHistoricDatum{}
	o := &PoloniexHistoricDatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, poloniexHistoricDatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum object: %s", err)
	}

	AddPoloniexHistoricDatumHook(boil.BeforeInsertHook, poloniexHistoricDatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	poloniexHistoricDatumBeforeInsertHooks = []PoloniexHistoricDatumHook{}

	AddPoloniexHistoricDatumHook(boil.AfterInsertHook, poloniexHistoricDatumAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	poloniexHistoricDatumAfterInsertHooks = []PoloniexHistoricDatumHook{}

	AddPoloniexHistoricDatumHook(boil.AfterSelectHook, poloniexHistoricDatumAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	poloniexHistoricDatumAfterSelectHooks = []PoloniexHistoricDatumHook{}

	AddPoloniexHistoricDatumHook(boil.BeforeUpdateHook, poloniexHistoricDatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	poloniexHistoricDatumBeforeUpdateHooks = []PoloniexHistoricDatumHook{}

	AddPoloniexHistoricDatumHook(boil.AfterUpdateHook, poloniexHistoricDatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	poloniexHistoricDatumAfterUpdateHooks = []PoloniexHistoricDatumHook{}

	AddPoloniexHistoricDatumHook(boil.BeforeDeleteHook, poloniexHistoricDatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	poloniexHistoricDatumBeforeDeleteHooks = []PoloniexHistoricDatumHook{}

	AddPoloniexHistoricDatumHook(boil.AfterDeleteHook, poloniexHistoricDatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	poloniexHistoricDatumAfterDeleteHooks = []PoloniexHistoricDatumHook{}

	AddPoloniexHistoricDatumHook(boil.BeforeUpsertHook, poloniexHistoricDatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	poloniexHistoricDatumBeforeUpsertHooks = []PoloniexHistoricDatumHook{}

	AddPoloniexHistoricDatumHook(boil.AfterUpsertHook, poloniexHistoricDatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	poloniexHistoricDatumAfterUpsertHooks = []PoloniexHistoricDatumHook{}
}
func testPoloniexHistoricDataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	poloniexHistoricDatum := &PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PoloniexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPoloniexHistoricDataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	poloniexHistoricDatum := &PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatum.Insert(tx, poloniexHistoricDatumColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := PoloniexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPoloniexHistoricDataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	poloniexHistoricDatum := &PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = poloniexHistoricDatum.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPoloniexHistoricDataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	poloniexHistoricDatum := &PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PoloniexHistoricDatumSlice{poloniexHistoricDatum}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPoloniexHistoricDataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	poloniexHistoricDatum := &PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := PoloniexHistoricData(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	poloniexHistoricDatumDBTypes = map[string]string{`Amount`: `character varying`, `Date`: `date`, `Globaltradeid`: `character varying`, `ID`: `integer`, `Rate`: `character varying`, `Total`: `character varying`, `Tradeid`: `character varying`, `Type`: `character varying`}
	_                            = bytes.MinRead
)

func testPoloniexHistoricDataUpdate(t *testing.T) {
	t.Parallel()

	if len(poloniexHistoricDatumColumns) == len(poloniexHistoricDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	poloniexHistoricDatum := &PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PoloniexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	if err = poloniexHistoricDatum.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPoloniexHistoricDataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(poloniexHistoricDatumColumns) == len(poloniexHistoricDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	poloniexHistoricDatum := &PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true, poloniexHistoricDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatum.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PoloniexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true, poloniexHistoricDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(poloniexHistoricDatumColumns, poloniexHistoricDatumPrimaryKeyColumns) {
		fields = poloniexHistoricDatumColumns
	} else {
		fields = strmangle.SetComplement(
			poloniexHistoricDatumColumns,
			poloniexHistoricDatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(poloniexHistoricDatum))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PoloniexHistoricDatumSlice{poloniexHistoricDatum}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPoloniexHistoricDataUpsert(t *testing.T) {
	t.Parallel()

	if len(poloniexHistoricDatumColumns) == len(poloniexHistoricDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	poloniexHistoricDatum := PoloniexHistoricDatum{}
	if err = randomize.Struct(seed, &poloniexHistoricDatum, poloniexHistoricDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = poloniexHistoricDatum.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert PoloniexHistoricDatum: %s", err)
	}

	count, err := PoloniexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &poloniexHistoricDatum, poloniexHistoricDatumDBTypes, false, poloniexHistoricDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PoloniexHistoricDatum struct: %s", err)
	}

	if err = poloniexHistoricDatum.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert PoloniexHistoricDatum: %s", err)
	}

	count, err = PoloniexHistoricData(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
