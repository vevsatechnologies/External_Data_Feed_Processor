// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testEventOnes(t *testing.T) {
	t.Parallel()

	query := EventOnes(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testEventOnesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventOne := &EventOne{}
	if err = randomize.Struct(seed, eventOne, eventOneDBTypes, true, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOne.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = eventOne.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := EventOnes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEventOnesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventOne := &EventOne{}
	if err = randomize.Struct(seed, eventOne, eventOneDBTypes, true, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOne.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = EventOnes(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := EventOnes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEventOnesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventOne := &EventOne{}
	if err = randomize.Struct(seed, eventOne, eventOneDBTypes, true, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOne.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := EventOneSlice{eventOne}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := EventOnes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testEventOnesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventOne := &EventOne{}
	if err = randomize.Struct(seed, eventOne, eventOneDBTypes, true, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOne.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := EventOneExists(tx, eventOne.ID)
	if err != nil {
		t.Errorf("Unable to check if EventOne exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EventOneExistsG to return true, but got false.")
	}
}
func testEventOnesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventOne := &EventOne{}
	if err = randomize.Struct(seed, eventOne, eventOneDBTypes, true, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOne.Insert(tx); err != nil {
		t.Error(err)
	}

	eventOneFound, err := FindEventOne(tx, eventOne.ID)
	if err != nil {
		t.Error(err)
	}

	if eventOneFound == nil {
		t.Error("want a record, got nil")
	}
}
func testEventOnesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventOne := &EventOne{}
	if err = randomize.Struct(seed, eventOne, eventOneDBTypes, true, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOne.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = EventOnes(tx).Bind(eventOne); err != nil {
		t.Error(err)
	}
}

func testEventOnesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventOne := &EventOne{}
	if err = randomize.Struct(seed, eventOne, eventOneDBTypes, true, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOne.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := EventOnes(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEventOnesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventOneOne := &EventOne{}
	eventOneTwo := &EventOne{}
	if err = randomize.Struct(seed, eventOneOne, eventOneDBTypes, false, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}
	if err = randomize.Struct(seed, eventOneTwo, eventOneDBTypes, false, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOneOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = eventOneTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := EventOnes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEventOnesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	eventOneOne := &EventOne{}
	eventOneTwo := &EventOne{}
	if err = randomize.Struct(seed, eventOneOne, eventOneDBTypes, false, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}
	if err = randomize.Struct(seed, eventOneTwo, eventOneDBTypes, false, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOneOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = eventOneTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EventOnes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func eventOneBeforeInsertHook(e boil.Executor, o *EventOne) error {
	*o = EventOne{}
	return nil
}

func eventOneAfterInsertHook(e boil.Executor, o *EventOne) error {
	*o = EventOne{}
	return nil
}

func eventOneAfterSelectHook(e boil.Executor, o *EventOne) error {
	*o = EventOne{}
	return nil
}

func eventOneBeforeUpdateHook(e boil.Executor, o *EventOne) error {
	*o = EventOne{}
	return nil
}

func eventOneAfterUpdateHook(e boil.Executor, o *EventOne) error {
	*o = EventOne{}
	return nil
}

func eventOneBeforeDeleteHook(e boil.Executor, o *EventOne) error {
	*o = EventOne{}
	return nil
}

func eventOneAfterDeleteHook(e boil.Executor, o *EventOne) error {
	*o = EventOne{}
	return nil
}

func eventOneBeforeUpsertHook(e boil.Executor, o *EventOne) error {
	*o = EventOne{}
	return nil
}

func eventOneAfterUpsertHook(e boil.Executor, o *EventOne) error {
	*o = EventOne{}
	return nil
}

func testEventOnesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &EventOne{}
	o := &EventOne{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, eventOneDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EventOne object: %s", err)
	}

	AddEventOneHook(boil.BeforeInsertHook, eventOneBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	eventOneBeforeInsertHooks = []EventOneHook{}

	AddEventOneHook(boil.AfterInsertHook, eventOneAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	eventOneAfterInsertHooks = []EventOneHook{}

	AddEventOneHook(boil.AfterSelectHook, eventOneAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	eventOneAfterSelectHooks = []EventOneHook{}

	AddEventOneHook(boil.BeforeUpdateHook, eventOneBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	eventOneBeforeUpdateHooks = []EventOneHook{}

	AddEventOneHook(boil.AfterUpdateHook, eventOneAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	eventOneAfterUpdateHooks = []EventOneHook{}

	AddEventOneHook(boil.BeforeDeleteHook, eventOneBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	eventOneBeforeDeleteHooks = []EventOneHook{}

	AddEventOneHook(boil.AfterDeleteHook, eventOneAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	eventOneAfterDeleteHooks = []EventOneHook{}

	AddEventOneHook(boil.BeforeUpsertHook, eventOneBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	eventOneBeforeUpsertHooks = []EventOneHook{}

	AddEventOneHook(boil.AfterUpsertHook, eventOneAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	eventOneAfterUpsertHooks = []EventOneHook{}
}
func testEventOnesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventOne := &EventOne{}
	if err = randomize.Struct(seed, eventOne, eventOneDBTypes, true, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOne.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EventOnes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEventOnesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventOne := &EventOne{}
	if err = randomize.Struct(seed, eventOne, eventOneDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOne.Insert(tx, eventOneColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := EventOnes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEventOnesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventOne := &EventOne{}
	if err = randomize.Struct(seed, eventOne, eventOneDBTypes, true, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOne.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = eventOne.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testEventOnesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventOne := &EventOne{}
	if err = randomize.Struct(seed, eventOne, eventOneDBTypes, true, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOne.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := EventOneSlice{eventOne}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testEventOnesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventOne := &EventOne{}
	if err = randomize.Struct(seed, eventOne, eventOneDBTypes, true, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOne.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := EventOnes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	eventOneDBTypes = map[string]string{`Day`: `character varying`, `ID`: `integer`, `Name`: `character varying`}
	_               = bytes.MinRead
)

func testEventOnesUpdate(t *testing.T) {
	t.Parallel()

	if len(eventOneColumns) == len(eventOnePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	eventOne := &EventOne{}
	if err = randomize.Struct(seed, eventOne, eventOneDBTypes, true, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOne.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EventOnes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, eventOne, eventOneDBTypes, true, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	if err = eventOne.Update(tx); err != nil {
		t.Error(err)
	}
}

func testEventOnesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(eventOneColumns) == len(eventOnePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	eventOne := &EventOne{}
	if err = randomize.Struct(seed, eventOne, eventOneDBTypes, true, eventOneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOne.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EventOnes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, eventOne, eventOneDBTypes, true, eventOnePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(eventOneColumns, eventOnePrimaryKeyColumns) {
		fields = eventOneColumns
	} else {
		fields = strmangle.SetComplement(
			eventOneColumns,
			eventOnePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(eventOne))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := EventOneSlice{eventOne}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testEventOnesUpsert(t *testing.T) {
	t.Parallel()

	if len(eventOneColumns) == len(eventOnePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	eventOne := EventOne{}
	if err = randomize.Struct(seed, &eventOne, eventOneDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventOne.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert EventOne: %s", err)
	}

	count, err := EventOnes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &eventOne, eventOneDBTypes, false, eventOnePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EventOne struct: %s", err)
	}

	if err = eventOne.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert EventOne: %s", err)
	}

	count, err = EventOnes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
