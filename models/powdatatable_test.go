// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testPowdatatables(t *testing.T) {
	t.Parallel()

	query := Powdatatables(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPowdatatablesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powdatatable := &Powdatatable{}
	if err = randomize.Struct(seed, powdatatable, powdatatableDBTypes, true, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatable.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = powdatatable.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Powdatatables(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPowdatatablesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powdatatable := &Powdatatable{}
	if err = randomize.Struct(seed, powdatatable, powdatatableDBTypes, true, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatable.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Powdatatables(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Powdatatables(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPowdatatablesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powdatatable := &Powdatatable{}
	if err = randomize.Struct(seed, powdatatable, powdatatableDBTypes, true, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatable.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PowdatatableSlice{powdatatable}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Powdatatables(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPowdatatablesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powdatatable := &Powdatatable{}
	if err = randomize.Struct(seed, powdatatable, powdatatableDBTypes, true, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatable.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PowdatatableExists(tx, powdatatable.ID)
	if err != nil {
		t.Errorf("Unable to check if Powdatatable exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PowdatatableExistsG to return true, but got false.")
	}
}
func testPowdatatablesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powdatatable := &Powdatatable{}
	if err = randomize.Struct(seed, powdatatable, powdatatableDBTypes, true, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatable.Insert(tx); err != nil {
		t.Error(err)
	}

	powdatatableFound, err := FindPowdatatable(tx, powdatatable.ID)
	if err != nil {
		t.Error(err)
	}

	if powdatatableFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPowdatatablesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powdatatable := &Powdatatable{}
	if err = randomize.Struct(seed, powdatatable, powdatatableDBTypes, true, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatable.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Powdatatables(tx).Bind(powdatatable); err != nil {
		t.Error(err)
	}
}

func testPowdatatablesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powdatatable := &Powdatatable{}
	if err = randomize.Struct(seed, powdatatable, powdatatableDBTypes, true, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatable.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Powdatatables(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPowdatatablesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powdatatableOne := &Powdatatable{}
	powdatatableTwo := &Powdatatable{}
	if err = randomize.Struct(seed, powdatatableOne, powdatatableDBTypes, false, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}
	if err = randomize.Struct(seed, powdatatableTwo, powdatatableDBTypes, false, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatableOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = powdatatableTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Powdatatables(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPowdatatablesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	powdatatableOne := &Powdatatable{}
	powdatatableTwo := &Powdatatable{}
	if err = randomize.Struct(seed, powdatatableOne, powdatatableDBTypes, false, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}
	if err = randomize.Struct(seed, powdatatableTwo, powdatatableDBTypes, false, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatableOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = powdatatableTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Powdatatables(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func powdatatableBeforeInsertHook(e boil.Executor, o *Powdatatable) error {
	*o = Powdatatable{}
	return nil
}

func powdatatableAfterInsertHook(e boil.Executor, o *Powdatatable) error {
	*o = Powdatatable{}
	return nil
}

func powdatatableAfterSelectHook(e boil.Executor, o *Powdatatable) error {
	*o = Powdatatable{}
	return nil
}

func powdatatableBeforeUpdateHook(e boil.Executor, o *Powdatatable) error {
	*o = Powdatatable{}
	return nil
}

func powdatatableAfterUpdateHook(e boil.Executor, o *Powdatatable) error {
	*o = Powdatatable{}
	return nil
}

func powdatatableBeforeDeleteHook(e boil.Executor, o *Powdatatable) error {
	*o = Powdatatable{}
	return nil
}

func powdatatableAfterDeleteHook(e boil.Executor, o *Powdatatable) error {
	*o = Powdatatable{}
	return nil
}

func powdatatableBeforeUpsertHook(e boil.Executor, o *Powdatatable) error {
	*o = Powdatatable{}
	return nil
}

func powdatatableAfterUpsertHook(e boil.Executor, o *Powdatatable) error {
	*o = Powdatatable{}
	return nil
}

func testPowdatatablesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Powdatatable{}
	o := &Powdatatable{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, powdatatableDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Powdatatable object: %s", err)
	}

	AddPowdatatableHook(boil.BeforeInsertHook, powdatatableBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	powdatatableBeforeInsertHooks = []PowdatatableHook{}

	AddPowdatatableHook(boil.AfterInsertHook, powdatatableAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	powdatatableAfterInsertHooks = []PowdatatableHook{}

	AddPowdatatableHook(boil.AfterSelectHook, powdatatableAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	powdatatableAfterSelectHooks = []PowdatatableHook{}

	AddPowdatatableHook(boil.BeforeUpdateHook, powdatatableBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	powdatatableBeforeUpdateHooks = []PowdatatableHook{}

	AddPowdatatableHook(boil.AfterUpdateHook, powdatatableAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	powdatatableAfterUpdateHooks = []PowdatatableHook{}

	AddPowdatatableHook(boil.BeforeDeleteHook, powdatatableBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	powdatatableBeforeDeleteHooks = []PowdatatableHook{}

	AddPowdatatableHook(boil.AfterDeleteHook, powdatatableAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	powdatatableAfterDeleteHooks = []PowdatatableHook{}

	AddPowdatatableHook(boil.BeforeUpsertHook, powdatatableBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	powdatatableBeforeUpsertHooks = []PowdatatableHook{}

	AddPowdatatableHook(boil.AfterUpsertHook, powdatatableAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	powdatatableAfterUpsertHooks = []PowdatatableHook{}
}
func testPowdatatablesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powdatatable := &Powdatatable{}
	if err = randomize.Struct(seed, powdatatable, powdatatableDBTypes, true, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatable.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Powdatatables(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPowdatatablesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powdatatable := &Powdatatable{}
	if err = randomize.Struct(seed, powdatatable, powdatatableDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatable.Insert(tx, powdatatableColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Powdatatables(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPowdatatablesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powdatatable := &Powdatatable{}
	if err = randomize.Struct(seed, powdatatable, powdatatableDBTypes, true, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatable.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = powdatatable.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPowdatatablesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powdatatable := &Powdatatable{}
	if err = randomize.Struct(seed, powdatatable, powdatatableDBTypes, true, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatable.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PowdatatableSlice{powdatatable}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPowdatatablesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powdatatable := &Powdatatable{}
	if err = randomize.Struct(seed, powdatatable, powdatatableDBTypes, true, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatable.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Powdatatables(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	powdatatableDBTypes = map[string]string{`BTCPrice`: `character varying`, `BlocksFound`: `character varying`, `CoinPrice`: `character varying`, `Coins`: `character varying`, `CurrentNetworkBlock`: `character varying`, `Efficiency`: `character varying`, `Est`: `character varying`, `EstCurrent`: `character varying`, `EstShare`: `character varying`, `EstTime`: `character varying`, `HashRate`: `character varying`, `ID`: `integer`, `LastBlock`: `character varying`, `NetHashrate`: `character varying`, `NetworkDiff`: `character varying`, `NetworkDifficulty`: `character varying`, `NextNetworkBlock`: `character varying`, `PoolHashrate`: `character varying`, `PoolName`: `character varying`, `Price`: `character varying`, `Progress`: `character varying`, `Time`: `character varying`, `TimeSinceLast`: `character varying`, `TotalMiners`: `character varying`, `Workers`: `character varying`}
	_                   = bytes.MinRead
)

func testPowdatatablesUpdate(t *testing.T) {
	t.Parallel()

	if len(powdatatableColumns) == len(powdatatablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	powdatatable := &Powdatatable{}
	if err = randomize.Struct(seed, powdatatable, powdatatableDBTypes, true, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatable.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Powdatatables(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, powdatatable, powdatatableDBTypes, true, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	if err = powdatatable.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPowdatatablesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(powdatatableColumns) == len(powdatatablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	powdatatable := &Powdatatable{}
	if err = randomize.Struct(seed, powdatatable, powdatatableDBTypes, true, powdatatableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatable.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Powdatatables(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, powdatatable, powdatatableDBTypes, true, powdatatablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(powdatatableColumns, powdatatablePrimaryKeyColumns) {
		fields = powdatatableColumns
	} else {
		fields = strmangle.SetComplement(
			powdatatableColumns,
			powdatatablePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(powdatatable))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PowdatatableSlice{powdatatable}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPowdatatablesUpsert(t *testing.T) {
	t.Parallel()

	if len(powdatatableColumns) == len(powdatatablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	powdatatable := Powdatatable{}
	if err = randomize.Struct(seed, &powdatatable, powdatatableDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = powdatatable.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Powdatatable: %s", err)
	}

	count, err := Powdatatables(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &powdatatable, powdatatableDBTypes, false, powdatatablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Powdatatable struct: %s", err)
	}

	if err = powdatatable.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Powdatatable: %s", err)
	}

	count, err = Powdatatables(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
